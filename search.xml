<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Django REST framework</title>
    <url>/2020/05/06/Django%20REST%20framework/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><ul>
<li><p><strong>安装</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install djangorestframework</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>在settings.py添加以下代码</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'rest_framework'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>配置</tag>
      </tags>
  </entry>
  <entry>
    <title>Axios配置Vue</title>
    <url>/2020/05/06/Axios%E9%85%8D%E7%BD%AEVue/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><ul>
<li><p><strong>首先在项目根目录执行以下代码安装</strong></p>
<ul>
<li><pre><code class="javascript">npm install axios
&lt;!--￼<span class="number">0</span>--&gt;</code></pre>
</li>
</ul>
</li>
<li><p><strong>官方文档</strong></p>
<ul>
<li><a href>http://www.axios-js.com/</a></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Axios</category>
      </categories>
      <tags>
        <tag>配置</tag>
      </tags>
  </entry>
  <entry>
    <title>Django</title>
    <url>/2020/05/06/Django/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目:"></a><strong>创建项目</strong>:</h2><ul>
<li>django-admin startproject 项目名称</li>
</ul>
<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构:"></a><strong>目录结构:</strong></h2><ul>
<li>manage.py是项目管理文件，通过它管理项目。</li>
<li>与项目同名的目录，此处为test1。</li>
<li><em>*init</em>*.py是一个空文件，作用是这个目录test1可以被当作包使用。</li>
<li>settings.py是项目的整体配置文件。</li>
<li>urls.py是项目的URL配置文件。</li>
<li>wsgi.py是项目与WSGI兼容的Web服务器入口，详细内容会在布署中讲到</li>
</ul>
<h2 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用:"></a><strong>创建应用:</strong></h2><a id="more"></a>
<p>python manage.py startapp 应用名称</p>
<h2 id="应用的目录结构"><a href="#应用的目录结构" class="headerlink" title="应用的目录结构:"></a><strong>应用的目录结构:</strong></h2><ul>
<li><em>*init.py</em>*是一个空文件，表示当前目录booktest可以当作一个python包使用。</li>
<li>tests.py文件用于<strong>开发测试用例</strong>，在实际开发中会有专门的测试人员，这个事情不需要我们来做。</li>
<li>models.py文件跟<strong>数据库</strong>操作相关。</li>
<li>views.py文件跟接收浏览器请求，进行处理，返回页面相关。</li>
<li>admin.py文件跟<strong>网站的后台管理</strong>相关。</li>
<li>migrations文件夹保存迁移文件记录。</li>
</ul>
<h2 id="安装应用"><a href="#安装应用" class="headerlink" title="安装应用:"></a><strong>安装应用:</strong></h2><p>在settings.py文件中设置:</p>
<p>INSTALLED_APPS = {‘应用名称’}</p>
<h2 id="开发服务器"><a href="#开发服务器" class="headerlink" title="开发服务器:"></a><strong>开发服务器:</strong></h2><p>python manage.py runserver ip:端口</p>
<p>例：</p>
<p>python manage.py runserver</p>
<p><strong>可以不写IP和端口，默认IP是127.0.0.1，默认端口为8000</strong></p>
<h2 id><a href="#" class="headerlink" title></a></h2><h2 id="ORM-Object-Relation-Mapping-框架"><a href="#ORM-Object-Relation-Mapping-框架" class="headerlink" title="ORM(Object Relation Mapping)框架"></a><strong>ORM(Object Relation Mapping)框架</strong></h2><p>通过类和类对象操作关系数据库中对应的数据表, 根据设计的类自动生成数据库中对应的表格</p>
<h3 id="定义模型类"><a href="#定义模型类" class="headerlink" title="定义模型类:"></a><strong>定义模型类:</strong></h3><p><strong>模型类定义在models.py文件中，继承自models.Model类。不需要定义主键列，在生成时会自动添加，并且值为自动增长。</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    btitle = models.CharField(max_length=<span class="number">20</span>)</span><br><span class="line">    bpub_date = models.DateField()</span><br></pre></td></tr></table></figure>

<h3 id="模型迁移"><a href="#模型迁移" class="headerlink" title="模型迁移:"></a><strong>模型迁移:</strong></h3><p>1)  生成迁移文件: python manage.py makemigrations</p>
<p>2） 根据第一步生成的迁移文件在数据库中创建表: python manage.py migrate</p>
<h3 id="-1"><a href="#-1" class="headerlink" title></a></h3><h3 id="后台管理"><a href="#后台管理" class="headerlink" title="后台管理:"></a><strong>后台管理:</strong></h3><p>使用Django的管理模块，需要按照如下步骤操作：</p>
<p><strong>1)</strong>  <strong>管理界面本地化</strong></p>
<p>打开settings.py文件，找到语言编码、时区的设置项，将内容改为如下：</p>
<p>LANGUAGE_CODE = ‘zh-hans’  #使用中国语言</p>
<p>TIME_ZONE = ‘Asia/Shanghai’  #使用中国上海时间</p>
<p><strong>2)</strong>  <strong>创建管理员</strong></p>
<p><strong>python manage.py createsuperuser</strong></p>
<p><strong>在浏览器中输入:</strong> <a href="http://127.0.0.1:8000/admin/" target="_blank" rel="noopener"><strong>http://127.0.0.1:8000/admin/</strong></a><strong>进行数据库的页面访问</strong></p>
<p><strong>3)</strong>  <strong>注册模型类</strong></p>
<p><strong><em>\</em>要在应用的admin.py文件中写入代码:**</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> booktest.models <span class="keyword">import</span> BookInfo,HeroInfo</span><br><span class="line">admin.site.register(BookInfo)</span><br><span class="line">admin.site.register(HeroInfo)</span><br></pre></td></tr></table></figure>



<p><strong>4)</strong>  <strong>自定义管理页面</strong></p>
<p>在应用的admin.py文件中自定义类继承admin.ModelAdmin类</p>
<ul>
<li><strong>属性list_display表示要显示哪些属性</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    list_display = [<span class="string">'id'</span>, <span class="string">'btitle'</span>, <span class="string">'bpub_date'</span>]</span><br></pre></td></tr></table></figure>



<ul>
<li><strong>修改模型类BookInfo的注册代码如下</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">admin.site.register(BookInfo, BookInfoAdmin)</span><br></pre></td></tr></table></figure>





<h1 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h1><h2 id="Django中模型类的方法与数据库操作对应"><a href="#Django中模型类的方法与数据库操作对应" class="headerlink" title="Django中模型类的方法与数据库操作对应:"></a><strong>Django中模型类的方法与数据库操作对应:</strong></h2><p>save(): 生成insert, update语句</p>
<p>delete(): 生成delete语句</p>
<p>all(), get(): 生成select语句</p>
<h2 id="修改数据库"><a href="#修改数据库" class="headerlink" title="修改数据库:"></a><strong>修改数据库:</strong></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'test2'</span>, <span class="comment">#数据库名字，</span></span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'root'</span>, <span class="comment">#数据库登录用户名</span></span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">'mysql'</span>, <span class="comment">#数据库登录密码</span></span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">'localhost'</span>, <span class="comment">#数据库所在主机</span></span><br><span class="line">        <span class="string">'PORT'</span>: <span class="string">'3306'</span>, <span class="comment">#数据库端口</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>注意</strong>: MySQL的数据库不会自动生成, 需要手动创建</p>
<p>还需要在项目的<strong>init</strong>.py文件中加上:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure>

<h2 id="定义属性："><a href="#定义属性：" class="headerlink" title="定义属性："></a>定义属性：</h2><p>django会为表创建自动增长的主键列，每个模型只能有一个主键列，如果使用选项设置某属性为主键列后django不会再创建自动增长的主键列. 默认创建的主键列属性为id，可以使用pk代替，pk全拼为primary key。<strong>注意：pk是主键的别名，若主键名为id2，那么pk是id2的别名</strong>。</p>
<p>定义属性方式: 属性=models.字段类型(选项)</p>
<h2 id="字段类型："><a href="#字段类型：" class="headerlink" title="字段类型："></a>字段类型：</h2><p>使用时需要引入django.db.models包，字段类型如下：</p>
<ul>
<li><p>AutoField：自动增长的IntegerField，通常不用指定，不指定时Django会自动创建属性名为id的自动增长属性。</p>
</li>
<li><p>BooleanField：布尔字段，值为True或False。</p>
</li>
<li><p>NullBooleanField：支持Null、True、False三种值。</p>
</li>
<li><p>CharField</p>
<p>(max_length=字符长度)：字符串。</p>
<ul>
<li>参数max_length表示最大字符个数。</li>
</ul>
</li>
<li><p>TextField：大文本字段，一般<strong>超过4000个</strong>字符时使用。</p>
</li>
<li><p>IntegerField：整数。</p>
</li>
<li><p>DecimalField</p>
<p>(max_digits=None, decimal_places=None)：十进制浮点数。</p>
<ul>
<li>参数max_digits表示总位数。</li>
<li>参数decimal_places表示小数位数。</li>
</ul>
</li>
<li><p>FloatField：浮点数。</p>
</li>
<li><p>DateField</p>
<p>[auto_now=False, auto_now_add=False])：日期。</p>
<ul>
<li>参数auto_now表示每次保存对象时，自动设置该字段为当前时间，用于”<strong>最后一次修改</strong>“的时间戳，它总是使用当前日期，默认为false。</li>
<li>参数auto_now_add表示当对象<strong>第一次被创建时</strong>自动设置当前时间，用于<strong>创建的时间戳</strong>，它总是使用当前日期，默认为false。</li>
<li>参数auto_now_add和auto_now是相互排斥的，组合将会发生错误。</li>
</ul>
</li>
<li><p>TimeField：时间，参数同DateField。</p>
</li>
<li><p>DateTimeField：日期时间，参数同DateField。</p>
</li>
<li><p>FileField：上传文件字段。</p>
</li>
<li><p>ImageField：继承于FileField，对上传的内容进行校验，确保是有效的图片。</p>
</li>
</ul>
<h2 id="字段中的选项："><a href="#字段中的选项：" class="headerlink" title="字段中的选项："></a>字段中的选项：</h2><p>通过选项实现对字段的约束，选项如下：</p>
<ul>
<li>null：如果为True，<strong>表示允许为空</strong>，默认值是False。</li>
<li>blank：如果为True，则该字段允许为空白，默认值是False。</li>
<li><strong>对比：null是数据库范畴的概念，blank是表单验证范畴的</strong>。</li>
<li>db_column：<strong>字段的名称</strong>，如果未指定，则使用属性的名称。</li>
<li>db_index：若值为True, 则在表中会为此字段<strong>创建索引</strong>，默认值是False。</li>
<li>default：默认值。</li>
<li>primary_key：若为True，则该字段会成为模型的主键字段，默认值是False，一般作为AutoField的选项使用。</li>
<li>unique：如果为True, 这个字段在表中必须有<strong>唯一值</strong>，默认值是False。</li>
</ul>
<h2 id="条件运算符："><a href="#条件运算符：" class="headerlink" title="条件运算符："></a>条件运算符：</h2><p>1） 字段__exact：表示等于，也可以直接用等号表示：</p>
<p>list=BookInfo.objects.filter(id__exact=1)</p>
<p>2） 字段__contains：是否包含</p>
<p>说明：如果要包含<strong>%无需转义</strong>，直接写即可。</p>
<p>list = BookInfo.objects.filter(btitle__contains=’传’)</p>
<p>3） startswith、endswith：以指定值开头或结尾</p>
<p>list = BookInfo.objects.filter(btitle__endswith=’部’)</p>
<p>以上运算符都区分大小写，在这些运算符前加上<strong>i</strong>表示不区分大小写，如<strong>iexact、icontains、istartswith、iendswith</strong>.</p>
<p>4） isnull空查询</p>
<p>list = BookInfo.objects.filter(btitle__isnull=False)</p>
<p>5） in：是否包含在范围内</p>
<p>list = BookInfo.objects.filter(id__in=[1, 3, 5])</p>
<p>6） gt、gte、lt、lte：大于、大于等于、小于、小于等于</p>
<p>list = BookInfo.objects.filter(id__gt=3)</p>
<p>7） 不等于的运算符，使用<strong>exclude()</strong>过滤器</p>
<p>list = BookInfo.objects.exclude(id=3)</p>
<p>8） 日期查询</p>
<p>year、month、day、week_day、hour、minute、second：对日期时间类型的属性进行运算</p>
<p>list = BookInfo.objects.filter(bpub_date__year=1980)</p>
<p>例：查询1980年1月1日后发表的图书。</p>
<p>list = BookInfo.objects.filter(bpub_date__gt=date(1980, 1, 1))</p>
<h2 id="F（Field）对象，-用于两个属性之间的比较："><a href="#F（Field）对象，-用于两个属性之间的比较：" class="headerlink" title="F（Field）对象， 用于两个属性之间的比较："></a><strong>F（Field）对象， 用于两个属性之间的比较：</strong></h2><p>from django.db.models import F</p>
<p>语法：F(属性名)</p>
<p>list = BookInfo.objects.filter(bread__gte=F(‘bcomment’)) 阅读量大于评论数的书本</p>
<p>list = BookInfo.objects.filter(bread__gt=F(‘bcomment’) * 2) F对象使用算数</p>
<h2 id="Q对象："><a href="#Q对象：" class="headerlink" title="Q对象："></a><strong>Q对象：</strong></h2><p>多个过滤器逐个调用表示逻辑与关系，同sql语句中where部分的and关键字</p>
<p>list=BookInfo.objects.filter(bread__gt=20,id__lt=3) 或 list=BookInfo.objects<strong>.filter(bread__gt=20).filter(id__lt=3)</strong></p>
<p>Q对象和 | 运算符一起使用表示逻辑or， 语法：Q(属性名__运算符=值)</p>
<p>Q对象可以使用&amp;、|连接，&amp;表示逻辑与，|表示逻辑或</p>
<p>list = BookInfo.objects.filter(<strong>Q(bread__gt=20) | Q(pk__lt=3)</strong>)</p>
<p>Q对象前可以使用~操作符，表示非not</p>
<p>list = BookInfo.objects.filter(<strong>~Q(pk=3)</strong>)</p>
<h2 id="聚合函数："><a href="#聚合函数：" class="headerlink" title="聚合函数："></a>聚合函数：</h2><p>聚合函数包括：<strong>Avg，Count，Max，Min，Sum</strong>，被定义在django.db.models中</p>
<p>list = BookInfo.objects.aggregate(Sum(‘bread’))，aggregate的<strong>返回值</strong>是一个<strong>字典类型</strong>，格式如下：<strong>{‘属性名__聚合类小写:值}</strong>， 如{‘bread__sum’:3}</p>
<p>计数count不使用aggregate， list = BookInfo.objects.count()，返回的数字</p>
<h2 id="查询集"><a href="#查询集" class="headerlink" title="查询集:"></a>查询集:</h2><p>查询集表示从数据库中获取的<strong>对象集合</strong>，在管理器上调用某些过滤器方法会返回查询集，查询集可以含有零个、一个或多个过滤器。过滤器基于所给的参数限制查询的结果，从Sql的角度，<strong>查询集和select语句等价</strong>，<strong>过滤器像where和limit子句</strong>。</p>
<h3 id="返回查询集的过滤器如下："><a href="#返回查询集的过滤器如下：" class="headerlink" title="返回查询集的过滤器如下："></a>返回查询集的过滤器如下：</h3><ul>
<li>all()：返回所有数据。</li>
<li>filter()：返回满足条件的数据。</li>
<li>exclude()：返回<strong>满足条件之外</strong>的数据，相当于sql语句中where部分的not关键字。</li>
<li>order_by()：对结果进行排序。</li>
</ul>
<h3 id="返回单个值的过滤器如下："><a href="#返回单个值的过滤器如下：" class="headerlink" title="返回单个值的过滤器如下："></a>返回单个值的过滤器如下：</h3><ul>
<li>get()：返回单个满足条件的对象<ul>
<li>如果未找到会引发”<strong>模型类.DoesNotExist</strong>“异常。</li>
<li>如果多条被返回，会引发”<strong>模型类.MultipleObjectsReturned</strong>“异常。</li>
</ul>
</li>
<li>count()：返回当前查询结果的<strong>总条数</strong>。</li>
<li>aggregate()：聚合，返回一个字典。</li>
</ul>
<h3 id="判断某一个查询集中是否有数据："><a href="#判断某一个查询集中是否有数据：" class="headerlink" title="判断某一个查询集中是否有数据："></a>判断某一个查询集中是否有数据：</h3><ul>
<li>exists()：判断查询集中是否有数据，如果有则返回True，没有则返回False。</li>
</ul>
<h3 id="两大特性"><a href="#两大特性" class="headerlink" title="两大特性:"></a>两大特性:</h3><ul>
<li>惰性执行：创建查询集不会访问数据库，直到调用数据时，才会访问数据库，调用数据的情况包括迭代、序列化、与if合用。</li>
<li>缓存：使用同一个查询集，第一次使用时会发生数据库的查询，然后把结果缓存下来，再次使用这个查询集时会使用缓存的数据。</li>
</ul>
<h3 id="查询集的缓存"><a href="#查询集的缓存" class="headerlink" title="查询集的缓存:"></a>查询集的缓存:</h3><p>每个查询集都包含一个缓存来最小化对数据库的访问。</p>
<p>在新建的查询集中，缓存为空，首次对查询集求值时，会发生数据库查询，django会将查询的结果存在查询集的缓存中，并返回请求的结果，接下来对查询集求值将重用缓存中的结果。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list=BookInfo.objects.all()</span><br><span class="line">[book.id <span class="keyword">for</span> book <span class="keyword">in</span> list]</span><br><span class="line">[book.id <span class="keyword">for</span> book <span class="keyword">in</span> list]</span><br></pre></td></tr></table></figure>



<h3 id="限制查询集"><a href="#限制查询集" class="headerlink" title="限制查询集"></a>限制查询集</h3><p>可以对查询集进行<strong>取下标或切片</strong>操作，等同于sql中的<strong>limit和offset</strong>子句。</p>
<p><strong>注意：不支持负数索引。</strong></p>
<p>对查询集进行切片后<strong>返回一个新的查询集</strong>，不会立即执行查询。</p>
<p>如果获取一个对象，直接使用[0]，等同于[0:1].get()，但是如果没有数据，[0]引发IndexError异常，[0:1].get()如果没有数据引发DoesNotExist异常。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list=BookInfo.objects.all()[<span class="number">0</span>:<span class="number">2</span>]</span><br></pre></td></tr></table></figure>



<h2 id="模型类关系"><a href="#模型类关系" class="headerlink" title="模型类关系"></a>模型类关系</h2><h3 id="关系字段类型"><a href="#关系字段类型" class="headerlink" title="关系字段类型"></a>关系字段类型</h3><p>关系型数据库的关系包括三种类型：</p>
<ul>
<li>ForeignKey：一对多，将字段定义在多的一端中。</li>
<li>ManyToManyField：多对多，将字段定义在任意一端中。</li>
<li>OneToOneField：一对一，将字段定义在任意一端中。</li>
<li>可以维护递归的关联关系，使用’self’指定，详见”自关联”。</li>
</ul>
<h3 id="一对多关系"><a href="#一对多关系" class="headerlink" title="一对多关系"></a>一对多关系</h3><p>参见booktest应用中的BookInfo类和HeroInfo类。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hbook = models.ForeignKey(<span class="string">"BookInfo"</span>)</span><br></pre></td></tr></table></figure>



<h3 id="多对多关系"><a href="#多对多关系" class="headerlink" title="多对多关系"></a>多对多关系</h3><p>设计一个新闻类和新闻类型类，一个新闻类型下可以用很多条新闻，一条新闻也可能归属于多种新闻类型。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TypeInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">  tname = models.CharField(max_length=<span class="number">20</span>) <span class="comment">#新闻类别</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewsInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">  ntitle = models.CharField(max_length=<span class="number">60</span>) <span class="comment">#新闻标题</span></span><br><span class="line">  ncontent = models.TextField() <span class="comment">#新闻内容</span></span><br><span class="line">  npub_date = models.DateTimeField(auto_now_add=<span class="literal">True</span>) <span class="comment">#新闻发布时间</span></span><br><span class="line">  ntype = models.ManyToManyField(<span class="string">'TypeInfo'</span>) <span class="comment">#通过ManyToManyField建立TypeInfo类和NewsInfo类之间多对多的关系</span></span><br></pre></td></tr></table></figure>



<h3 id="关联查询"><a href="#关联查询" class="headerlink" title="关联查询"></a>关联查询</h3><h4 id="通过对象执行关联查询"><a href="#通过对象执行关联查询" class="headerlink" title="通过对象执行关联查询"></a>通过对象执行关联查询</h4><p>在定义模型类时，可以指定三种关联关系，<strong>最常用的是一对多关系</strong>:</p>
<p>由<strong>一到多</strong>的访问语法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一对应的模型类对象.多对应的模型类名小写_set</span></span><br><span class="line"></span><br><span class="line">b = BookInfo.objects.get(id=<span class="number">1</span>)</span><br><span class="line">b.heroinfo_set.all()</span><br></pre></td></tr></table></figure>



<p>由多到一的访问语法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 多对应的模型类对象.多对应的模型类中的关系类属性名</span></span><br><span class="line"></span><br><span class="line">h = HeroInfo.objects.get(id=<span class="number">1</span>)</span><br><span class="line">h.hbook  <span class="comment"># 获得一对应的模型类对象</span></span><br></pre></td></tr></table></figure>



<p>访问一对应的模型类关联对象的id语法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">多对应的模型类对象.关联类属性_id</span><br><span class="line"></span><br><span class="line">h = HeroInfo.objects.get(id=<span class="number">1</span>)</span><br><span class="line">h.book_id</span><br></pre></td></tr></table></figure>





<h3 id="通过模型类执行关联查询"><a href="#通过模型类执行关联查询" class="headerlink" title="通过模型类执行关联查询"></a>通过模型类执行关联查询</h3><h4 id="由多模型类条件查询一模型类数据"><a href="#由多模型类条件查询一模型类数据" class="headerlink" title="由多模型类条件查询一模型类数据:"></a>由多模型类条件查询一模型类数据:</h4><p>语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">关联模型类名小写__属性名__条件运算符&#x3D;值</span><br></pre></td></tr></table></figure>

<p>例：查询图书，要求图书中英雄的描述包含’八’。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = BookInfo.objects.filter(heroinfo__hcontent__contains=<span class="string">'八'</span>)</span><br></pre></td></tr></table></figure>

<h4 id="由一模型类条件查询多模型类数据"><a href="#由一模型类条件查询多模型类数据" class="headerlink" title="由一模型类条件查询多模型类数据:"></a>由一模型类条件查询多模型类数据:</h4><p>语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一模型类关联属性名__一模型类属性名__条件运算符&#x3D;值</span><br></pre></td></tr></table></figure>

<p>例：查询书名为“天龙八部”的所有英雄。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = HeroInfo.objects.filter(hbook__btitle=<span class="string">'天龙八部'</span>)</span><br></pre></td></tr></table></figure>





<h3 id="自关联"><a href="#自关联" class="headerlink" title="自关联:"></a>自关联:</h3><p>对于地区信息、分类信息等数据，表结构非常类似，每个表的数据量十分有限，为了充分利用数据表的大量数据存储功能，可以设计成一张表，内部的关系字段指向本表的主键，这就是自关联的表结构。</p>
<p>说明：关系属性使用self指向本类，要求null和blank允许为空，因为一级数据是没有父级的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义地区模型类，存储省、市、区县信息</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AreaInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    atitle=models.CharField(max_length=<span class="number">30</span>)<span class="comment">#名称</span></span><br><span class="line">    aParent=models.ForeignKey(<span class="string">'self'</span>,null=<span class="literal">True</span>,blank=<span class="literal">True</span>)<span class="comment">#关系</span></span><br></pre></td></tr></table></figure>

<p>视图定义如下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    currentArea = AreaInfo.objects.get(atitle=<span class="string">'桂林市'</span>, aParent__isnull=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'booktest/index.html'</span>, dict(currentArea=currentArea))</span><br></pre></td></tr></table></figure>

<p> html页面如下:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>当前地区: &#123;&#123; currentArea.atitle &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>上级地区: &#123;&#123; currentArea.aParent.atitle &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>下级地区: <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        &#123;% for downArea in currentArea.areainfo_set.all %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; downArea.atitle &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="模型类扩展"><a href="#模型类扩展" class="headerlink" title="模型类扩展:"></a>模型类扩展:</h3><h4 id="模型实例方法"><a href="#模型实例方法" class="headerlink" title="模型实例方法"></a>模型实例方法</h4><ul>
<li>str()：在将对象转换成字符串时会被调用。</li>
<li>save()：将模型对象保存到数据表中，ORM框架会转换成对应的insert或update语句。</li>
<li>delete()：将模型对象从数据表中删除，ORM框架会转换成对应的delete语句。</li>
</ul>
<h4 id="模型类的属性"><a href="#模型类的属性" class="headerlink" title="模型类的属性"></a>模型类的属性</h4><p>属性objects：管理器，是models.Manager类型的对象，用于与数据库进行交互。</p>
<blockquote>
<p>当没有为模型类定义管理器时，Django会为每一个模型类生成一个名为objects的管理器，自定义管理器后，Django不再生成默认管理器objects。</p>
</blockquote>
<p>为模型类BookInfo定义管理器books语法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    ...</span><br><span class="line">    books = models.Manager()</span><br></pre></td></tr></table></figure>



<h4 id="管理器Manager"><a href="#管理器Manager" class="headerlink" title="管理器Manager"></a>管理器Manager</h4><p>管理器是Django的模型进行数据库操作的接口，Django应用的每个模型类都拥有至少一个管理器。Django支持自定义管理器类，继承自models.Manager。</p>
<p>自定义管理器类主要用于两种情况：</p>
<ul>
<li>1.修改原始查询集，重写all()方法</li>
<li>2.向管理器类中添加额外的方法，如向数据库中插入数据。</li>
</ul>
<p>1.修改原始查询集，重写all()方法。</p>
<p>a）打开booktest/models.py文件，定义类BookInfoManager</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#图书管理器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoManager</span><span class="params">(models.Manager)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">all</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#默认查询未删除的图书信息</span></span><br><span class="line">        <span class="comment">#调用父类的成员语法为：super().方法名</span></span><br><span class="line">        <span class="keyword">return</span> super().all().filter(isDelete=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>





<p>b）在模型类BookInfo中定义管理器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    ...</span><br><span class="line">    books = BookInfoManager()</span><br></pre></td></tr></table></figure>



<p>2.在管理器类中定义创建对象的方法</p>
<p>对模型类对应的数据表进行操作时，推荐将这些操作数据表的方法封装起来，放到模型管理器类中。</p>
<p>打开booktest/models.py文件，定义方法create:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoManager</span><span class="params">(models.Manager)</span>:</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">#创建模型类，接收参数为属性赋值</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_book</span><span class="params">(self, title, pub_date)</span>:</span></span><br><span class="line">        <span class="comment">#创建模型类对象self.model可以获得模型类</span></span><br><span class="line">        book = self.model()</span><br><span class="line">        book.btitle = title</span><br><span class="line">        book.bpub_date = pub_date</span><br><span class="line">        book.bread=<span class="number">0</span></span><br><span class="line">        book.bcommet=<span class="number">0</span></span><br><span class="line">        book.isDelete = <span class="literal">False</span></span><br><span class="line">        <span class="comment"># 将数据插入进数据表</span></span><br><span class="line">        book.save()</span><br><span class="line">        <span class="keyword">return</span> book</span><br></pre></td></tr></table></figure>





<h4 id="元选项"><a href="#元选项" class="headerlink" title="元选项"></a>元选项</h4><p>在模型类中定义类Meta，用于设置元信息，如使用db_table自定义表的名字。</p>
<p>数据表的默认名称为： <code>_, 例如: ``booktest_bookinfo</code></p>
<p>指定BookInfo模型类生成的数据表名为bookinfo:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="string">"""书籍类"""</span></span><br><span class="line">    btitle = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    bpubDate = models.DateField()</span><br><span class="line">    bread = models.IntegerField(default=<span class="number">0</span>)</span><br><span class="line">    bcomment = models.IntegerField(default=<span class="number">0</span>)</span><br><span class="line">    isDelete = models.BooleanField(default=<span class="literal">False</span>)</span><br><span class="line">    objects = BookManager()</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">"bookinfo"</span></span><br></pre></td></tr></table></figure>





<h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p> 视图负责接受Web请求HttpRequest，进行逻辑处理，返回Web响应HttpResponse给请求者。</p>
<h3 id="使用视图的过程"><a href="#使用视图的过程" class="headerlink" title="使用视图的过程"></a>使用视图的过程</h3><p>(1)在”应用/views.py”中定义视图。(2)配置URLconf，将视图函数和url对应起来。</p>
<h3 id="URLconf"><a href="#URLconf" class="headerlink" title="URLconf"></a>URLconf</h3><p>用户通过在浏览器的地址栏中输入网址请求网站，对于Django开发的网站，向哪一个视图进行处理请求，是由url匹配找到的。</p>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>1）在settings.py中通过ROOT_URLCONF指定url配置，默认已经有此配置。ROOT_URLCONF=’项目名称.urls’</p>
<p> 2）打开项目的urls.py可以看到默认配置。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> include, url</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^admin/'</span>, include(admin.site.urls)),</span><br><span class="line">    url(<span class="string">r'^'</span>, include(<span class="string">'booktest.urls'</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>语法一：包含，一般在自定义应用中创建一个urls.py来定义url。</p>
<p>这种语法用于test3/urls.py中，目的是将应用的urls配置到应用内部，数据更清晰并且易于维护。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url(正则,include(<span class="string">'应用.urls'</span>))</span><br></pre></td></tr></table></figure>

<p>语法二：定义，指定URL和视图函数的对应关系。</p>
<p>在应用内部创建urls.py文件，指定请求地址与视图的对应关系。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url(正则,<span class="string">'视图函数名称'</span>)</span><br></pre></td></tr></table></figure>

<p>说明1：正则部分推荐使用r，表示字符串不转义，这样在正则表达式中使用\只写一个就可以。 说明2：不能在开始加反斜杠，推荐在结束加反斜杠(index, index/)。</p>
<h4 id="获取值"><a href="#获取值" class="headerlink" title="获取值"></a>获取值</h4><p>请求的url被看做是一个普通的python字符串，进行匹配时不包括域名、get或post参数。 如请求地址如下：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8000/delete1/?a=10</span><br></pre></td></tr></table></figure>



<p>可以在匹配过程中从url中捕获参数，每个捕获的参数都作为一个普通的python字符串传递给视图。</p>
<h6 id="方式一：提取位置参数"><a href="#方式一：提取位置参数" class="headerlink" title="方式一：提取位置参数"></a>方式一：提取位置参数</h6><p>直接使用小括号，通过位置参数传递给视图。</p>
<p>1）为了提取参数，修改上面的正则表达式如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url(<span class="string">r'^delete(\d+)/$'</span>,views.show_arg),</span><br></pre></td></tr></table></figure>

<p>2）修改视图show_arg如下：</p>
<p>注意：参数的名字是任意的如a1、b8，尽量做到见名知意。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_arg</span><span class="params">(request,id)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'show arg %s'</span>%id)</span><br></pre></td></tr></table></figure>



<h6 id="方式二：关键字参数"><a href="#方式二：关键字参数" class="headerlink" title="方式二：关键字参数"></a>方式二：关键字参数</h6><p>在正则表达式部分为组命名。</p>
<p>1）修改正则表达式如下：</p>
<p>其中?P部分表示为这个参数定义的名称为id，可以是其它名称，起名做到见名知意。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url(<span class="string">r'^delete(?P&lt;id1&gt;\d+)/$'</span>,views.show_arg),</span><br></pre></td></tr></table></figure>

<p>2）修改视图show_arg如下：</p>
<p>注意：视图show_arg此时必须要有一个参数名为id1，否则报错。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_arg</span><span class="params">(request,id1)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'show %s'</span>%id1)</span><br></pre></td></tr></table></figure>

<h3 id="内置错误视图"><a href="#内置错误视图" class="headerlink" title="内置错误视图"></a>内置错误视图</h3><p>Django内置处理HTTP错误的视图，主要错误及视图包括：</p>
<ul>
<li>404错误：page not found视图</li>
<li>500错误：server error视图</li>
</ul>
<p>如果想看到错误视图而不是调试信息，需要修改setting.py文件的DEBUG项。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DEBUG = <span class="literal">False</span></span><br><span class="line">ALLOWED_HOSTS = [<span class="string">'*'</span>, ]</span><br></pre></td></tr></table></figure>



<h3 id="自定义错误视图"><a href="#自定义错误视图" class="headerlink" title="自定义错误视图"></a>自定义错误视图</h3><p>在templates文件加下新建404.html或者500.html页面即可</p>
<h2 id="HttpReqeust对象"><a href="#HttpReqeust对象" class="headerlink" title="HttpReqeust对象"></a>HttpReqeust对象</h2><p>服务器接收到http协议的请求后，会根据报文创建HttpRequest对象，<strong>这个对象不需要我们创建</strong>，直接使用服务器构造好的对象就可以。<strong>视图的第一个参数必须是HttpRequest对象</strong>，在django.http模块中定义了HttpRequest对象的API。</p>
<h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><p>下面除非特别说明，<strong>属性都是只读的</strong>。</p>
<ul>
<li><p>path：一个字符串，表示请求的页面的完整路径，不包含域名和参数部分。</p>
</li>
<li><p>method：一个字符串，表示请求使用的HTTP方法，常用值包括：</p>
<p>‘GET’、’POST’</p>
<p>。</p>
<ul>
<li>在浏览器中给出地址发出请求采用get方式，如超链接。</li>
<li>在浏览器中点击表单的提交按钮发起请求，如果表单的method设置为post则为post请求。</li>
</ul>
</li>
<li><p>encoding：一个字符串，表示提交的数据的编码方式。</p>
<ul>
<li>如果为None则表示使用浏览器的默认设置，<strong>一般为utf-8</strong>。</li>
<li>这个属性是可写的，可以通过修改它来修改访问表单数据使用的编码，接下来对属性的任何访问将使用新的encoding值。</li>
</ul>
</li>
<li><p>GET：<strong>QueryDict类型对象</strong>，类似于字典，包含<strong>get请求方式的所有参数</strong>。</p>
</li>
<li><p>POST：<strong>QueryDict类型对象</strong>，类似于字典，包含<strong>post请求方式的所有参数</strong>。</p>
</li>
<li><p>FILES：一个类似于字典的对象，包含<strong>所有的上传文件</strong>。</p>
</li>
<li><p>COOKIES：一个标准的Python字典，包含所有的cookie，键和值都为字符串。</p>
</li>
<li><p>session：一个既可读又可写的类似于字典的对象，表示当前的会话，只有当Django 启用会话的支持时才可用，详细内容见”状态保持”。</p>
</li>
</ul>
<h4 id="QueryDict对象"><a href="#QueryDict对象" class="headerlink" title="QueryDict对象"></a>QueryDict对象</h4><ul>
<li>定义在django.http.QueryDict</li>
<li>HttpRequest对象的属性GET、POST都是QueryDict类型的对象</li>
<li>与python字典不同，QueryDict类型的对象用来处理<strong>同一个键带有多个值的情况</strong></li>
<li>方法get()：根据键获取值</li>
<li><strong>如果一个键同时拥有多个值将获取最后一个值</strong></li>
<li>如果键不存在则返回None值，可以设置默认值进行后续处理</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">　　　　dict.get(<span class="string">'键'</span>,默认值), 可以简写为dict[<span class="string">'键'</span>]</span><br></pre></td></tr></table></figure>



<ul>
<li><p>方法<strong>getlist()</strong>：根据键获取值，值以列表返回，可以获取指定<strong>键的所有值</strong></p>
</li>
<li><p>如果键不存在则返回空列表[]，可以设置默认值进行后续处理, </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict.getlist(<span class="string">'键'</span>,默认值)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="GET属性"><a href="#GET属性" class="headerlink" title="GET属性"></a>GET属性</h4><p>请求格式：在请求地址结尾使用?，之后以”键=值”的格式拼接，多个键值对之间以&amp;连接。</p>
<p>例如: <code>http://www.itcast.cn/?**a=10&amp;b=20&amp;c=python** 其中的请求参数为：``a=10&amp;b=20&amp;c=python</code></p>
<ul>
<li>分析请求参数，键为’a’、’b’、’c’，值为’10’、’20’、’python’。</li>
<li>在Django中可以使用HttpRequest对象的GET属性获得get方方式请求的参数。</li>
<li>GET属性是一个QueryDict类型的对象，键和值都是字符串类型。</li>
<li>键是开发人员在编写代码时确定下来的。</li>
<li>值是根据数据生成的。</li>
</ul>
<h4 id="POST属性"><a href="#POST属性" class="headerlink" title="POST属性"></a>POST属性</h4><p>使用<strong>form表单请求</strong>时，method方式为post则会发起post方式的请求，需要使用HttpRequest对象的POST属性接收参数，POST属性是一个QueryDict类型的对象。</p>
<p>问：表单form如何提交参数呢？</p>
<p>答：表单控件name属性的值作为键，<strong>value属性的值为值</strong>，构成键值对提交。</p>
<ul>
<li>如果表单控件没有name属性则不提交。</li>
<li>对于checkbox控件，name属性的值相同为一组，被选中的项会被提交，出现一键多值的情况。</li>
<li>键是表单控件name属性的值，是由开发人员编写的。</li>
<li>值是用户填写或选择的。</li>
</ul>
<p>1）打开booktest/views.py文件，创建视图show_reqarg</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_reqarg</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        a = request.GET[<span class="string">'a'</span>]</span><br><span class="line">        b = request.GET[<span class="string">'b'</span>]</span><br><span class="line">        c = request.GET[<span class="string">'c'</span>]</span><br><span class="line">        print(a, b, c)</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'booktest/index.html'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        hobby = request.POST.getlist(<span class="string">"hobby"</span>)</span><br><span class="line">        print(hobby)</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'booktest/index.html'</span>)</span><br></pre></td></tr></table></figure>



<p>2）修改templates/booktest目录下的index.html，添加代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        3.提交数据的两种方式： get方式:</span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/show_reqarg/?a=1&amp;b=2&amp;c=python"</span>&gt;</span>get方式提交数据<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span> post方式:</span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"/show_reqarg/"</span>&gt;</span></span><br><span class="line">            &#123;% csrf_token %&#125;</span><br><span class="line">            姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"uname"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span> 性别：男</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"男"</span> /&gt;</span> 女</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">value</span>=<span class="string">"女"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span> 爱好： 吃饭</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"吃饭"</span> /&gt;</span> 睡觉</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"睡觉"</span> /&gt;</span> 打豆豆</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"打豆豆"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="-2"><a href="#-2" class="headerlink" title></a></h1><h2 id="HttpResponse对象"><a href="#HttpResponse对象" class="headerlink" title="HttpResponse对象"></a>HttpResponse对象</h2><p>视图在接收请求并处理后，必须返回HttpResponse对象或子对象。在django.http模块中定义了HttpResponse对象的API。HttpRequest对象由Django创建，<strong>HttpResponse对象由开发人员创建</strong>。</p>
<h3 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h3><ul>
<li>content：表示返回的内容。</li>
<li>charset：表示response采用的编码字符集，默认为utf-8。</li>
<li>status_code：返回的HTTP响应状态码。</li>
<li>content-type：指定返回数据的的MIME类型，默认为’text/html’。</li>
</ul>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul>
<li><p><em>*init</em>*：创建HttpResponse对象后完成返回内容的初始化。</p>
</li>
<li><p>set_cookie</p>
<p>：设置Cookie信息。</p>
<p><code>set_cookie(key, value=&#39;&#39;, max_age=None, expires=None)</code></p>
</li>
<li><p>cookie是网站以键值对格式存储在浏览器中的一段纯文本信息，用于实现用户跟踪。</p>
<ul>
<li>max_age是一个整数，表示在指定秒数后过期。</li>
<li>expires是一个datetime或timedelta对象，会话将在这个指定的日期/时间过期。</li>
<li>max_age与expires<strong>二选一</strong>。</li>
<li>如果不指定过期时间，在关闭浏览器时cookie会过期。</li>
</ul>
</li>
<li><p>delete_cookie(key)：删除指定的key的Cookie，如果key不存在则什么也不发生。</p>
</li>
<li><p>write：向响应体中写数据。</p>
</li>
</ul>
<h3 id="子类JsonResponse"><a href="#子类JsonResponse" class="headerlink" title="子类JsonResponse"></a>子类JsonResponse</h3><p>在浏览器中使用javascript<strong>发起ajax请求</strong>时，返回<strong>json格式</strong>的数据，此处以jquery的get()方法为例。类JsonResponse继承自HttpResponse对象，被定义在django.http模块中，创建对象时接收字典作为参数。</p>
<p>JsonResponse对象的content-type为’application/json’。</p>
<h3 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install django-cors-headers</span><br><span class="line">INSTALLED_APPS = (</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">'corsheaders'</span>,</span><br><span class="line">    ...</span><br><span class="line">)</span><br><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">'corsheaders.middleware.CorsMiddleware'</span>,</span><br><span class="line">    ...</span><br><span class="line">]</span><br><span class="line">CORS_ALLOW_CREDENTIALS = <span class="literal">True</span>  <span class="comment"># 允许携带cookie</span></span><br><span class="line">CORS_ORIGIN_ALLOW_ALL = <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<h3 id="Axios安装及配置"><a href="#Axios安装及配置" class="headerlink" title="Axios安装及配置"></a>Axios安装及配置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure>

<h3 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#静态文件的路径 </span></span><br><span class="line">STATICFILES_DIRS = ( </span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">'static'</span>),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>初识Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Django注册</title>
    <url>/2020/05/06/Django%E6%B3%A8%E5%86%8C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><ul>
<li><strong>models.py</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用户表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># 用户名</span></span><br><span class="line">    username = models.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    <span class="comment"># 密码</span></span><br><span class="line">    password = models.CharField(max_length=<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 生命表明</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'user'</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>views.py</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导包</span></span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注册接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Register</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="comment"># 接收参数</span></span><br><span class="line">        username = request.GET.get(<span class="string">'username'</span>)</span><br><span class="line">        password = request.GET.get(<span class="string">'password'</span>)</span><br><span class="line">        <span class="comment"># 排重</span></span><br><span class="line">        users = User.objects.filter(username=username).first()</span><br><span class="line">        <span class="keyword">if</span> users:</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;</span><br><span class="line">                <span class="string">'code'</span>: <span class="number">403</span>,</span><br><span class="line">                <span class="string">'message'</span>: <span class="string">'用户名已存在'</span></span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 入库</span></span><br><span class="line">            User.objects.create(username=username, password=password_encrypt(password))</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;</span><br><span class="line">                <span class="string">'code'</span>: <span class="number">200</span>,</span><br><span class="line">                <span class="string">'message'</span>: <span class="string">'注册成功'</span></span><br><span class="line">            &#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>urls.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导包</span></span><br><span class="line"><span class="keyword">from</span> app.views <span class="keyword">import</span> Register</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'register/'</span>, Register.as_view())</span><br><span class="line">]</span><br></pre></td></tr></table></figure>


</li>
</ul>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>注册</tag>
      </tags>
  </entry>
  <entry>
    <title>Django登录</title>
    <url>/2020/05/06/Django%E7%99%BB%E5%BD%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><ul>
<li><p><strong>views.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 登录接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Login</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="comment"># 接收参数</span></span><br><span class="line">        username = request.GET.get(<span class="string">'username'</span>, <span class="literal">None</span>)</span><br><span class="line">        password = request.GET.get(<span class="string">'password'</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="comment"># 查询数据</span></span><br><span class="line">        user = User.objects.filter(username=username, password=password_encrypt(password)).first()</span><br><span class="line">        <span class="keyword">if</span> user:</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;</span><br><span class="line">                <span class="string">'code'</span>: <span class="number">200</span>,</span><br><span class="line">                <span class="string">'message'</span>: <span class="string">'登录成功'</span>,</span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;</span><br><span class="line">                <span class="string">'code'</span>: <span class="number">403</span>,</span><br><span class="line">                <span class="string">'message'</span>: <span class="string">'您的用户名或密码不正确'</span></span><br><span class="line">            &#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>urls.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导包</span></span><br><span class="line"><span class="keyword">from</span> app.views <span class="keyword">import</span> Login</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'Login/'</span>, Login.as_view())</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>登录</tag>
      </tags>
  </entry>
  <entry>
    <title>Django跨域</title>
    <url>/2020/05/06/Django%E8%B7%A8%E5%9F%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><ul>
<li><strong>安装django-core-headers</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install django-cors-headers</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>配置settings.py</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'corsheaders'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">  <span class="comment"># 必须按顺序添加</span></span><br><span class="line">  MIDDLEWARE = [</span><br><span class="line">      <span class="string">'django.middleware.security.SecurityMiddleware'</span>,</span><br><span class="line">      <span class="string">'django.contrib.sessions.middleware.SessionMiddleware'</span>,</span><br><span class="line">      <span class="string">'corsheaders.middleware.CorsMiddleware'</span>,	<span class="comment"># 在这里添加</span></span><br><span class="line">      <span class="string">'django.contrib.sessions.middleware.SessionMiddleware'</span>,</span><br><span class="line">  <span class="string">'django.middleware.common.CommonMiddleware'</span>,</span><br><span class="line">      <span class="comment"># 'django.middleware.csrf.CsrfViewMiddleware',</span></span><br><span class="line">      <span class="string">'django.contrib.auth.middleware.AuthenticationMiddleware'</span>,</span><br><span class="line">      <span class="string">'django.contrib.messages.middleware.MessageMiddleware'</span>,</span><br><span class="line">      <span class="string">'django.middleware.clickjacking.XFrameOptionsMiddleware'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 允许跨域访问的域名</span></span><br><span class="line">CORS_ORIGIN_ALLOW_ALL = <span class="literal">True</span></span><br><span class="line"><span class="comment"># 允许携带cookie</span></span><br><span class="line">CORS_ALLOW_CREDENTIALS = <span class="literal">True</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>配置</tag>
      </tags>
  </entry>
  <entry>
    <title>Django静态文件配置</title>
    <url>/2020/05/06/Django%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><ul>
<li><p><strong>setting.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">STATICFILES_DIRS = [</span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">"static/upload"</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>



</li>
</ul>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>配置</tag>
      </tags>
  </entry>
  <entry>
    <title>Django配置MySQL</title>
    <url>/2020/05/06/Django%E9%85%8D%E7%BD%AEMySQL/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1、在setting-py中配置"><a href="#1、在setting-py中配置" class="headerlink" title="1、在setting.py中配置"></a>1、在setting.py中配置</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,   <span class="comment"># 数据库引擎</span></span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'4a'</span>,    <span class="comment"># 数据库名</span></span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'root'</span>,  <span class="comment"># 数据库用户名</span></span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">''</span>,  <span class="comment"># 密码</span></span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">'localhost'</span>,    <span class="comment"># 主机</span></span><br><span class="line">        <span class="string">'PORT'</span>: <span class="number">3306</span>,    <span class="comment"># 端口</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="2、数据库迁移"><a href="#2、数据库迁移" class="headerlink" title="2、数据库迁移"></a>2、数据库迁移</h1><ul>
<li><p><strong>Python3不支持MySQLdb，可用pymysql代替</strong></p>
<ul>
<li><pre><code class="python"><span class="comment"># 安装pymysql</span>
pip install pymysql
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- **在项目文件下的__init__.py添加如下代码**</span><br><span class="line"></span><br><span class="line">  - &#96;&#96;&#96;python</span><br><span class="line">    import pymysql</span><br><span class="line">    pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure></code></pre>
</li>
</ul>
</li>
<li><p><strong>在终端执行数据库迁移命令</strong></p>
<ul>
<li><pre><code class="python">python manage.py makemigrations
python manage.py migrate</code></pre>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>配置</tag>
      </tags>
  </entry>
  <entry>
    <title>HEXO首次部署Git</title>
    <url>/2020/05/06/HEXO%E9%A6%96%E6%AC%A1%E9%83%A8%E7%BD%B2Git/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><ul>
<li><p><strong>安装</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>HEXO</category>
      </categories>
      <tags>
        <tag>HEXO部署</tag>
      </tags>
  </entry>
  <entry>
    <title>HeyUI配置Vue</title>
    <url>/2020/05/06/HeyUI%E9%85%8D%E7%BD%AEVue/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><ul>
<li><p><strong>首先在项目根目录执行以下代码</strong></p>
<ul>
<li><pre><code class="javascript">npm install heyui
npm install less
npm install less-loader
&lt;!--￼<span class="number">0</span>--&gt;</code></pre>
</li>
</ul>
</li>
<li><p><strong>详细使用请看官方文档</strong></p>
<ul>
<li><a href>https://www.heyui.top/component/</a></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>HeyUI</category>
      </categories>
      <tags>
        <tag>配置</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL自动启动本地服务</title>
    <url>/2020/05/06/MySQL%E8%87%AA%E5%8A%A8%E5%90%AF%E5%8A%A8%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>tags: </p>
<ul>
<li>服务自启<br>categories: </li>
<li>MySQL</li>
</ul>
<hr>
<ul>
<li><p><strong>以管理员身份运行cmd，执行以下代码</strong></p>
<ul>
<li><pre><code class="python">mysqld --install</code></pre>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>MySql</category>
      </categories>
      <tags>
        <tag>自启本地服务</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue注册</title>
    <url>/2020/05/06/Vue%E6%B3%A8%E5%86%8C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><ul>
<li><strong>src—&gt;components—&gt;register.vue</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;ue</span><br><span class="line">      &lt;Form&gt;</span><br><span class="line">        &lt;FormItem label=<span class="string">'用户名'</span> icon=<span class="string">'h-icon-user'</span> prop=<span class="string">'username'</span>&gt;</span><br><span class="line">          &lt;input type=<span class="string">"text"</span> v-model=<span class="string">"username"</span>&gt;</span><br><span class="line">        &lt;<span class="regexp">/FormItem&gt;</span></span><br><span class="line"><span class="regexp">        &lt;FormItem label='密码' icon='h-icon-lock' prop='password'&gt;</span></span><br><span class="line"><span class="regexp">          &lt;input type="password" v-model="password"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>FormItem&gt;</span><br><span class="line">        &lt;FormItem&gt;</span><br><span class="line">          &lt;Button color=<span class="string">'primary'</span> @click=<span class="string">"register"</span>&gt;注册&lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">          &lt;Button @click="reset"&gt;重置&lt;/</span>Button&gt;</span><br><span class="line">          &lt;p&gt;</span><br><span class="line">            已有帐号?<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/login"</span>&gt;</span>去登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">          &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>FormItem&gt;</span><br><span class="line">      &lt;<span class="regexp">/Form&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">export default &#123;</span></span><br><span class="line"><span class="regexp">  data() &#123;</span></span><br><span class="line"><span class="regexp">    return &#123;</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/ 定义表单数据</span></span><br><span class="line"><span class="regexp">      username: '',</span></span><br><span class="line"><span class="regexp">      password: ''</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  methods: &#123;</span></span><br><span class="line"><span class="regexp">    register: function() &#123;</span></span><br><span class="line"><span class="regexp">      if (this.username==='' | this.password==='') &#123;</span></span><br><span class="line"><span class="regexp">        this.$Message('请您输入用户名与密码');</span></span><br><span class="line"><span class="regexp">      &#125; else &#123;</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 请求后台接口</span></span><br><span class="line"><span class="regexp">        this.axios.get('http:/</span><span class="regexp">/localhost:8000/</span>register/?username=<span class="string">'+this.username+'</span>&amp;password=<span class="string">'+this.password).then((response) =&gt; &#123;</span></span><br><span class="line"><span class="string">        if (response.data.code==200) &#123;</span></span><br><span class="line"><span class="string">          this.$Message(response.data.message);</span></span><br><span class="line"><span class="string">        &#125; else &#123;</span></span><br><span class="line"><span class="string">          this.$Message(response.data.message);          </span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;)</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    // 重置</span></span><br><span class="line"><span class="string">    reset: function() &#123;</span></span><br><span class="line"><span class="string">      this.username = '</span><span class="string">';</span></span><br><span class="line"><span class="string">      this.password = '</span><span class="string">';</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;style&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/style&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>src—&gt;router—&gt;index.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> register <span class="keyword">from</span> <span class="string">'../components/register'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/register'</span>,</span><br><span class="line">      name: <span class="string">'register'</span>,</span><br><span class="line">      component: register</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>注册</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue登录</title>
    <url>/2020/05/06/Vue%E7%99%BB%E5%BD%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><ul>
<li><strong>src—&gt;components—&gt;login.vue</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;Form&gt;</span><br><span class="line">          &lt;FormItem label=<span class="string">'用户名'</span> icon=<span class="string">'h-icon-user'</span> prop=<span class="string">'username'</span>&gt;</span><br><span class="line">              &lt;input type=<span class="string">"text"</span> v-model=<span class="string">"username"</span>&gt;</span><br><span class="line">          &lt;<span class="regexp">/FormItem&gt;</span></span><br><span class="line"><span class="regexp">          &lt;FormItem label='密码' icon='h-icon-lock' prop='password'&gt;</span></span><br><span class="line"><span class="regexp">              &lt;input type="password" v-model="password"&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>FormItem&gt;</span><br><span class="line">          &lt;FormItem&gt;</span><br><span class="line">              &lt;Button color=<span class="string">'primary'</span> @click=<span class="string">"login"</span>&gt;登录&lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">              &lt;Button @click="reset"&gt;重置&lt;/</span>Button&gt;</span><br><span class="line">              &lt;p <span class="class"><span class="keyword">class</span></span>=<span class="string">"a"</span>&gt;没有账号？&lt;a href=<span class="string">"/register"</span>&gt;去注册&lt;<span class="regexp">/a&gt;&lt;/</span>p&gt;</span><br><span class="line">          &lt;<span class="regexp">/FormItem&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>Form&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="comment">// 定义表单数据</span></span><br><span class="line">            username: <span class="string">''</span>,</span><br><span class="line">            password: <span class="string">''</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        login: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 请求后台接口</span></span><br><span class="line">            <span class="keyword">this</span>.axios.get(<span class="string">'http://localhost:8000/login/?username='</span>+<span class="keyword">this</span>.username+<span class="string">'&amp;password='</span>+<span class="keyword">this</span>.password).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (response.data.code===<span class="number">200</span>) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.$Message(response.data.message);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">this</span>.$Message(response.data.message);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 重置</span></span><br><span class="line">        reset: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.username = <span class="string">''</span>;</span><br><span class="line">            <span class="keyword">this</span>.password = <span class="string">''</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>src—&gt;router—&gt;index.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> login <span class="keyword">from</span> <span class="string">'../components/login'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/login'</span>,</span><br><span class="line">      name: <span class="string">'login'</span>,</span><br><span class="line">      component: login</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>登录</tag>
      </tags>
  </entry>
  <entry>
    <title>pip设置国内源</title>
    <url>/2020/05/06/pip%E8%AE%BE%E7%BD%AE%E5%9B%BD%E5%86%85%E6%BA%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url&#x3D;http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F;</span><br><span class="line">[install]</span><br><span class="line">trusted-host&#x3D;mirrors.aliyun.com</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>PIP</category>
      </categories>
      <tags>
        <tag>设置源</tag>
      </tags>
  </entry>
  <entry>
    <title>npm设置淘宝源</title>
    <url>/2020/05/06/npm%E8%AE%BE%E7%BD%AE%E6%B7%98%E5%AE%9D%E6%BA%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https:<span class="comment">//registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>NPM</category>
      </categories>
      <tags>
        <tag>设置源</tag>
      </tags>
  </entry>
  <entry>
    <title>Git命令</title>
    <url>/2020/05/06/Git%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><ul>
<li><p><strong>Git全局设置</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;用户名&quot;</span><br><span class="line">git config --global user.email 邮箱</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>将存储库克隆到新目录中</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone 存储库地址</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>创建一个空的Git存储库或重新初始化一个现有的存储库</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>添加暂存区</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add -A</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>提交到版本库</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git commit -m &#39;注释&#39;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>添加远程分支</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote add origin 存储库地址</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>推送远程分支</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>总结</strong></p>
<ul>
<li><p><strong>创建git仓库</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;用户名&quot;</span><br><span class="line">git config --global user.email &quot;邮箱&quot;</span><br><span class="line">cd 提交文件夹</span><br><span class="line">git init</span><br><span class="line">git add A</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git remote add origin 储存库地址</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>更新仓库</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add -A</span><br><span class="line">git commit -m &#39;注释&#39;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>






</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>命令</tag>
      </tags>
  </entry>
  <entry>
    <title>Python</title>
    <url>/2020/05/06/Python/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul>
<li><strong>Python 是一个高层次的结合了解释性、编译性、互动性和面向对象的脚本语言</strong></li>
<li><strong>Python 的设计具有很强的可读性，相比其他语言经常使用英文关键字，其他语言的一些标点符号，它具有比其他语言更有特色语法结构</strong></li>
</ul>
<h1 id="发展历史"><a href="#发展历史" class="headerlink" title="发展历史"></a>发展历史</h1><ul>
<li><strong>Python 是由 Guido van Rossum 在八十年代末和九十年代初，在荷兰国家数学和计算机科学研究所设计出来的</strong></li>
<li><strong>Python 本身也是由诸多其他语言发展而来的,这包括 ABC、Modula-3、C、C++、Algol-68、SmallTalk、Unix shell 和其他的脚本语言等等</strong></li>
<li><strong>像 Perl 语言一样，Python 源代码同样遵循 GPL(GNU General Public License)协议</strong></li>
<li><strong>现在 Python 是由一个核心开发团队在维护，Guido van Rossum 仍然占据着至关重要的作用，指导其进展</strong></li>
</ul>
<h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><ul>
<li><strong>易于学习：Python有相对较少的关键字，结构简单，和一个明确定义的语法，学习起来更加简单</strong></li>
<li><strong>易于阅读：Python的成功在于它的源代码是相当容易维护的</strong></li>
<li><strong>一个广泛的标准库：Python的最大的优势之一是丰富的库，跨平台的，在UNIX，Windows和Macintosh兼容很好</strong></li>
<li><strong>互动模式：互动模式的支持，您可以从终端输入执行代码并获得结果的语言，互动的测试和调试代码片断</strong></li>
<li><strong>可移植：如果你需要一段运行很快的关键代码，或者是想要编写一些不愿开放的算法，你可以使用C或C++完成那部分程序，然后从你的Python程序中调用</strong></li>
<li><strong>数据库：Python提供所有主要的商业数据库的接口</strong></li>
<li><strong>GUI编程：Python支持GUI可以创建和移植到许多系统调用</strong></li>
<li><strong>可嵌入：你可以将Python嵌入到C/C++程序，让你的程序的用户获得”脚本化”的能力</strong></li>
</ul>
<h1 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h1><ul>
<li><p><strong>在 Python 里，标识符由字母、数字、下划线组成</strong></p>
</li>
<li><p><strong>在 Python 中，所有标识符可以包括英文、数字以及下划线(_)，但不能以数字开头</strong></p>
</li>
<li><p><strong>Python 中的标识符是区分大小写的</strong></p>
</li>
<li><p><strong>以下划线开头的标识符是有特殊意义的。以单下划线开头 _foo 的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用 from xxx import * 而导入</strong></p>
</li>
<li><p><strong>以双下划线开头的 __foo 代表类的私有成员，以双下划线开头和结尾的 foo 代表 Python 里特殊方法专用的标识，如 init() 代表类的构造函数</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> (<span class="string">'hello'</span>);<span class="keyword">print</span> (<span class="string">'runoob'</span>);</span><br><span class="line">hello</span><br><span class="line">runoob</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="保留字符"><a href="#保留字符" class="headerlink" title="保留字符"></a>保留字符</h1><table>
<thead>
<tr>
<th align="left"><strong>and</strong></th>
<th><strong>exec</strong></th>
<th><strong>not</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>assert</strong></td>
<td><strong>finally</strong></td>
<td><strong>or</strong></td>
</tr>
<tr>
<td align="left"><strong>break</strong></td>
<td><strong>for</strong></td>
<td><strong>pass</strong></td>
</tr>
<tr>
<td align="left"><strong>class</strong></td>
<td><strong>from</strong></td>
<td><strong>print</strong></td>
</tr>
<tr>
<td align="left"><strong>continue</strong></td>
<td><strong>global</strong></td>
<td><strong>raise</strong></td>
</tr>
<tr>
<td align="left"><strong>def</strong></td>
<td><strong>if</strong></td>
<td><strong>return</strong></td>
</tr>
<tr>
<td align="left"><strong>del</strong></td>
<td><strong>import</strong></td>
<td><strong>try</strong></td>
</tr>
<tr>
<td align="left"><strong>elif</strong></td>
<td><strong>in</strong></td>
<td><strong>while</strong></td>
</tr>
<tr>
<td align="left"><strong>else</strong></td>
<td><strong>is</strong></td>
<td><strong>with</strong></td>
</tr>
<tr>
<td align="left"><strong>except</strong></td>
<td><strong>lambda</strong></td>
<td><strong>yield</strong></td>
</tr>
</tbody></table>
<h1 id="标准数据类型"><a href="#标准数据类型" class="headerlink" title="标准数据类型"></a>标准数据类型</h1><ul>
<li><strong>Numbers（数字）</strong></li>
<li><strong>String（字符串）</strong></li>
<li><strong>List（列表）</strong></li>
<li><strong>Tuple（元组）</strong></li>
<li><strong>Dictionary（字典）</strong></li>
</ul>
<h1 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h1><ul>
<li><strong>int（有符号整型）</strong></li>
<li><strong>long（长整型[也可以代表八进制和十六进制]）</strong></li>
<li><strong>float（浮点型）</strong></li>
<li><strong>complex（复数）</strong></li>
</ul>
<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><ul>
<li><strong>字符串或串(String)是由数字、字母、下划线组成的一串字符</strong></li>
</ul>
<h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><ul>
<li><strong>List（列表） 是 Python 中使用最频繁的数据类型</strong></li>
<li><strong>列表可以完成大多数集合类的数据结构实现。它支持字符，数字，字符串甚至可以包含列表（即嵌套）</strong></li>
<li><strong>列表用 [ ] 标识，是 python 最通用的复合数据类型</strong></li>
<li><strong>列表中值的切割也可以用到变量 [头下标:尾下标] ，就可以截取相应的列表，从左到右索引默认 0 开始，从右到左索引默认 -1 开始，下标可以为空表示取到头或尾</strong></li>
</ul>
<h1 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h1><ul>
<li><strong>元组是另一个数据类型，类似于 List（列表）</strong></li>
<li><strong>元组用 () 标识。内部元素用逗号隔开。但是元组不能二次赋值，相当于只读列表</strong></li>
</ul>
<h1 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h1><ul>
<li><strong>字典(dictionary)是除列表以外python之中最灵活的内置数据结构类型。列表是有序的对象集合，字典是无序的对象集合</strong></li>
<li><strong>两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取</strong></li>
<li><strong>字典用”{ }”标识。字典由索引(key)和它对应的值value组成</strong></li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>初识python</tag>
      </tags>
  </entry>
  <entry>
    <title>冒泡排序</title>
    <url>/2020/05/10/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 冒泡排序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span><span class="params">(nums)</span>:</span></span><br><span class="line">    length = len(nums)</span><br><span class="line">    <span class="comment"># 序列长度为length，需要执行length-1轮交换</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, length):</span><br><span class="line">        <span class="comment"># 对于每一轮交换，都将序列当中的左右元素进行比较</span></span><br><span class="line">        <span class="comment"># 每轮交换当中，由于序列最后的元素一定是最大的，</span></span><br><span class="line">        <span class="comment"># 因此每轮循环到序列未排序的位置即可</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(length-i):</span><br><span class="line">            <span class="keyword">if</span> nums[j] &gt; nums[j+<span class="number">1</span>]:</span><br><span class="line">                temp = nums[j]</span><br><span class="line">                nums[j] = nums[j+<span class="number">1</span>]</span><br><span class="line">                nums[j+<span class="number">1</span>] = temp</span><br><span class="line">    <span class="keyword">return</span> nums</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>插入排序</title>
    <url>/2020/05/10/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 插入排序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_sort</span><span class="params">(nums)</span>:</span></span><br><span class="line">    <span class="comment"># 遍历数组中的所有元素，其中0号索引元素默认已排序，因此从1开始</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(nums)):</span><br><span class="line">    <span class="comment"># 将该元素与已排序好的前序数组依次比较，如果该元素小，则交换</span></span><br><span class="line">    <span class="comment"># range(x,-1,0):从x倒序循环到0，依次比较，</span></span><br><span class="line">    <span class="comment"># 每次比较如果小于会交换位置，正好按递减的顺序</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">            <span class="comment"># 判断：如果符合条件则交换</span></span><br><span class="line">            <span class="keyword">if</span> nums[j] &lt; nums[j<span class="number">-1</span>]:</span><br><span class="line">                temp = nums[j]</span><br><span class="line">                nums[j] = nums[j<span class="number">-1</span>]</span><br><span class="line">                nums[j<span class="number">-1</span>] = temp</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> nums</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>希尔（Shell）排序</title>
    <url>/2020/05/10/%E5%B8%8C%E5%B0%94%EF%BC%88Shell%EF%BC%89%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 希尔排序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_shell</span><span class="params">(nums)</span>:</span></span><br><span class="line">    <span class="comment"># 初始化gap值，此处利用序列长度的一半为其赋值</span></span><br><span class="line">    gap = len(nums) // <span class="number">2</span></span><br><span class="line">    <span class="comment"># 第一层循环：依次改变gap值对列表进行分组</span></span><br><span class="line">    <span class="keyword">while</span> gap &gt;= <span class="number">1</span>:</span><br><span class="line">        <span class="comment"># 下面：利用直接插入排序的思想对分组数据进行排序</span></span><br><span class="line">        <span class="comment"># range(gap, len(L)):从gap开始</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(gap, len(nums)):</span><br><span class="line">            <span class="comment"># range(i, 0, -gap):从i开始与选定元素开始倒序比较</span></span><br><span class="line">            <span class="comment"># 每个比较元素之间间隔gap</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i, <span class="number">0</span>, -gap):</span><br><span class="line">                <span class="comment"># 如果该组当中两个元素满足交换条件，则进行交换</span></span><br><span class="line">                <span class="keyword">if</span> nums[j] &lt; nums[j-gap]:</span><br><span class="line">                    temp = nums[j-gap]</span><br><span class="line">                    nums[j-gap] = nums[j]</span><br><span class="line">                    nums[j] = temp</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        gap = gap // <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> nums</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>选择排序</title>
    <url>/2020/05/10/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 选择排序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_sort</span><span class="params">(nums)</span>:</span></span><br><span class="line">    <span class="comment"># 依次遍历序列中的每一个元素</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">        <span class="comment"># 将当前位置的元素定义此轮循环当中的最小值</span></span><br><span class="line">        min_idx = i</span><br><span class="line">        <span class="comment"># 将该元素与剩下的元素依次比较寻找最小元素</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, len(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[j] &lt; nums[min_idx]:</span><br><span class="line">                min_idx = j</span><br><span class="line">        <span class="comment"># 将比较后得到的真正的最小值赋值给当前位置</span></span><br><span class="line">        <span class="keyword">if</span> i != min_idx:</span><br><span class="line">            temp = nums[i]</span><br><span class="line">            nums[i] = nums[min_idx]</span><br><span class="line">            nums[min_idx] = temp</span><br><span class="line">    <span class="keyword">return</span> nums</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>堆排序</title>
    <url>/2020/05/10/%E5%A0%86%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取左右叶子节点</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">LEFT</span><span class="params">(i)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>*i + <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RIGHT</span><span class="params">(i)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>*i + <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ********** 调整大顶堆 **********</span></span><br><span class="line"><span class="comment"># nums:待调整序列 length: 序列长度 i:需要调整的结点</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">adjust_max_heap</span><span class="params">(nums, length, i)</span>:</span></span><br><span class="line">    <span class="comment"># 定义一个int值保存当前序列最大值的下标</span></span><br><span class="line">    largest = i</span><br><span class="line">    <span class="comment"># 执行循环操作：两个任务：1 寻找最大值的下标；2.最大值与父节点交换</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 获得序列左右叶子节点的下标</span></span><br><span class="line">        left, right = LEFT(i), RIGHT(i)</span><br><span class="line">        <span class="comment"># 当左叶子节点的下标小于序列长度 并且左叶子节点的值大于父节点时，</span></span><br><span class="line">        <span class="comment"># 将左叶子节点的下标赋值给largest</span></span><br><span class="line">        <span class="keyword">if</span> (left &lt; length) <span class="keyword">and</span> (nums[left] &gt; nums[i]):</span><br><span class="line">            largest = left</span><br><span class="line">        <span class="comment"># 当右叶子节点的下标小于序列长度 并且右叶子节点的值大于父节点时，</span></span><br><span class="line">        <span class="comment"># 将右叶子节点的下标值赋值给largest</span></span><br><span class="line">        <span class="keyword">if</span> (right &lt; length) <span class="keyword">and</span> (nums[right] &gt; nums[largest]):</span><br><span class="line">            largest = right</span><br><span class="line">        <span class="comment"># 如果largest不等于i 说明当前的父节点不是最大值，需要交换值</span></span><br><span class="line">        <span class="keyword">if</span> largest != i:</span><br><span class="line">            temp = nums[i]</span><br><span class="line">            nums[i] = nums[largest]</span><br><span class="line">            nums[largest] = temp</span><br><span class="line">            i = largest</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#********** 建立大顶堆 **********</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_max_heap</span><span class="params">(nums)</span>:</span></span><br><span class="line">    length = len(nums)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(length//<span class="number">2</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">        adjust_max_heap(nums, length, x)</span><br><span class="line"></span><br><span class="line"><span class="comment">#********** 堆排序 **********</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">heap_sort</span><span class="params">(nums)</span>:</span></span><br><span class="line">    <span class="comment"># 先建立大顶堆，保证最大值位于根节点；并且父节点的值大于叶子结点</span></span><br><span class="line">    build_max_heap(nums)</span><br><span class="line">    <span class="comment"># i：当前堆中序列的长度.初始化为序列的长度</span></span><br><span class="line">    length = len(nums)</span><br><span class="line">    <span class="comment"># 执行循环：1. 每次取出堆顶元素置于序列的最后(len-1,len-2,len-3...)</span></span><br><span class="line"><span class="comment">#         2. 调整堆，使其继续满足大顶堆的性质，注意实时修改堆中序列的长度</span></span><br><span class="line">    <span class="keyword">while</span> length &gt; <span class="number">0</span>:</span><br><span class="line">        temp = nums[length<span class="number">-1</span>]</span><br><span class="line">        nums[length<span class="number">-1</span>] = nums[<span class="number">0</span>]</span><br><span class="line">        nums[<span class="number">0</span>] = temp</span><br><span class="line">        <span class="comment"># 堆中序列长度减1</span></span><br><span class="line">        length -= <span class="number">1</span></span><br><span class="line">        <span class="comment"># 调整大顶堆</span></span><br><span class="line">        adjust_max_heap(nums, length, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> nums</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>快速排序</title>
    <url>/2020/05/10/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 快速排序</span></span><br><span class="line"><span class="comment"># nums：待排序的序列；start排序的开始index,end序列末尾的index</span></span><br><span class="line"><span class="comment"># 对于长度为length的序列：start = 0;end = length-1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(nums, start=<span class="number">0</span>, end=None)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> end <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        end = len(nums) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> start &lt; end:</span><br><span class="line">        i, j, pivot = start, end, nums[start]</span><br><span class="line">        <span class="keyword">while</span> i &lt; j:</span><br><span class="line">            <span class="comment"># 从右开始向左寻找第一个小于pivot的值</span></span><br><span class="line">            <span class="keyword">while</span> (i &lt; j) <span class="keyword">and</span> (nums[j] &gt;= pivot):</span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">            <span class="comment"># 将小于pivot的值移到左边</span></span><br><span class="line">            <span class="keyword">if</span> i &lt; j:</span><br><span class="line">                nums[i] = nums[j]</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 从左开始向右寻找第一个大于pivot的值</span></span><br><span class="line">            <span class="keyword">while</span> (i &lt; j) <span class="keyword">and</span> (nums[i] &lt;= pivot):</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 将大于pivot的值移到右边</span></span><br><span class="line">            <span class="keyword">if</span> i &lt; j:</span><br><span class="line">                nums[j] = nums[i]</span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">        <span class="comment"># 循环结束后，说明 i=j，此时左边的值全都小于pivot,右边的值全都大于pivot</span></span><br><span class="line">        <span class="comment"># pivot的位置移动正确，那么此时只需对左右两侧的序列调用此函数进一步排序即可</span></span><br><span class="line">        <span class="comment"># 递归调用函数：依次对左侧序列：从0 ~ i-1//右侧序列：从i+1 ~ end</span></span><br><span class="line">        nums[i] = pivot</span><br><span class="line">        <span class="comment"># 左侧序列继续排序</span></span><br><span class="line">        quick_sort(nums, start, i<span class="number">-1</span>)</span><br><span class="line">        <span class="comment"># 右侧序列继续排序</span></span><br><span class="line">        quick_sort(nums, i+<span class="number">1</span>, end)</span><br><span class="line">    <span class="keyword">return</span> nums</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>归并排序</title>
    <url>/2020/05/10/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 归并排序</span></span><br><span class="line"><span class="comment"># 这是合并的函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(left, right)</span>:</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="comment"># 从两个有顺序的列表里边依次取数据比较后放入result</span></span><br><span class="line">    <span class="comment"># 每次我们分别拿出两个列表中最小的数比较，把较小的放入result</span></span><br><span class="line">    <span class="keyword">while</span> (len(left) &gt; <span class="number">0</span>) <span class="keyword">and</span> (len(right) &gt; <span class="number">0</span>):</span><br><span class="line">        <span class="comment"># 为了保持稳定性，当遇到相等的时候优先把</span></span><br><span class="line">        <span class="comment"># 左侧的数放进结果列表，因为left本来也是大数列中比较靠左的</span></span><br><span class="line">        <span class="keyword">if</span> left[<span class="number">0</span>] &lt;= right[<span class="number">0</span>]:</span><br><span class="line">            result.append(left.pop(<span class="number">0</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result.append(right.pop(<span class="number">0</span>))</span><br><span class="line">    result += left</span><br><span class="line">    result += right</span><br><span class="line"></span><br><span class="line">    <span class="comment"># while循环出来之后 说明其中一个数组没有数据了，</span></span><br><span class="line">    <span class="comment"># 我们把另一个数组添加到结果数组后面</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="comment"># 归并排序的函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span><span class="params">(nums)</span>:</span></span><br><span class="line">    <span class="comment"># 不断递归调用自己一直到拆分成成单个元素的</span></span><br><span class="line">    <span class="comment"># 时候就返回这个元素，不再拆分了</span></span><br><span class="line">    <span class="keyword">if</span> len(nums) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> nums</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 取拆分的中间位置</span></span><br><span class="line">    mid = len(nums) // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 拆分过后左右两侧子串</span></span><br><span class="line">    left = nums[:mid]</span><br><span class="line">    rigt = nums[mid:]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对拆分过后的左右再拆分 一直到只有一个元素为止</span></span><br><span class="line">    <span class="comment"># 最后一次递归时候ll和lr都会接到一个元素的列表</span></span><br><span class="line">    ll = merge_sort(left)</span><br><span class="line">    <span class="comment"># ll一定会得到已经排好序的左序列</span></span><br><span class="line">    lr = merge_sort(rigt)</span><br><span class="line">    <span class="comment"># lr得到排好序的右序列</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 我们对返回的两个拆分结果进行排序后合并再返回正确顺序的子列表</span></span><br><span class="line">    <span class="comment"># 这里我们调用另一个函数帮助我们按顺序合并ll和lr</span></span><br><span class="line">    <span class="keyword">return</span> merge(ll, lr)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>基数排序</title>
    <url>/2020/05/10/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 基数排序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">radix_sort</span><span class="params">(nums)</span>:</span></span><br><span class="line">    max_num = max(nums)</span><br><span class="line">    pos = len(str(max_num))  <span class="comment"># 获取最大数的位数</span></span><br><span class="line">    buckets = [[] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]  <span class="comment"># 构建10个桶</span></span><br><span class="line">    <span class="comment"># 从低位到高位依次执行循环</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(pos):</span><br><span class="line">        <span class="comment"># 对序列的每一个数字进行操作</span></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="comment"># 获取每个数字的基数</span></span><br><span class="line">            radix = (num // (<span class="number">10</span> ** i)) % <span class="number">10</span></span><br><span class="line">            <span class="comment"># 将数字放到基数对应的桶中</span></span><br><span class="line">            buckets[radix].append(num)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将桶中的元素按顺序放回原数列</span></span><br><span class="line">        idx = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> bt <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">            <span class="keyword">while</span> len(buckets[bt]) &gt; <span class="number">0</span>:</span><br><span class="line">                nums[idx] = buckets[bt].pop(<span class="number">0</span>)</span><br><span class="line">                idx += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> nums</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>二分查找</title>
    <url>/2020/05/10/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 递归解决二分查找</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search_rec</span><span class="params">(nums, data)</span>:</span></span><br><span class="line">     length = len(nums)</span><br><span class="line">     <span class="keyword">if</span> length &lt; <span class="number">1</span>:</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">     mid = length // <span class="number">2</span></span><br><span class="line">     <span class="keyword">if</span> nums[mid] &gt; data:</span><br><span class="line">         <span class="keyword">return</span> binary_search_rec(nums[<span class="number">0</span>:mid], data)</span><br><span class="line">     <span class="keyword">elif</span> nums[mid] &lt; data:</span><br><span class="line">         <span class="keyword">return</span> binary_search_rec(nums[mid+<span class="number">1</span>:], data)</span><br><span class="line">     <span class="keyword">else</span>:</span><br><span class="line">         <span class="keyword">return</span> mid</span><br><span class="line"></span><br><span class="line"><span class="comment"># 非递归解决二分查找</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(nums, data)</span>:</span></span><br><span class="line">    length = len(nums)</span><br><span class="line">    first = <span class="number">0</span></span><br><span class="line">    last = length - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> first &lt;= last:</span><br><span class="line">        mid = (last + first) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> nums[mid] &gt; data:</span><br><span class="line">            last = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> nums[mid] &lt; data:</span><br><span class="line">            first = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>哈希查找</title>
    <url>/2020/05/10/%E5%93%88%E5%B8%8C%E6%9F%A5%E6%89%BE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HashTable</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.elem = []  <span class="comment"># 使用list数据结构作为哈希表元素保存方法</span></span><br><span class="line">        self.count = <span class="number">0</span>  <span class="comment"># 最大表长</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert_hash</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="string">"""插入关键字到哈希表内"""</span></span><br><span class="line">        address = key % self.count  <span class="comment"># 求散列地址,散列函数采用除留余数法，</span></span><br><span class="line">                                   <span class="comment"># 数组有多长就对应最大有多少种索引值，刚好可以存放所有数据</span></span><br><span class="line">        <span class="keyword">while</span> self.elem[address]:  <span class="comment"># 当前位置已经有数据了，发生冲突。</span></span><br><span class="line">            address = (address + <span class="number">1</span>) % self.count  <span class="comment"># 线性探测下一地址是否可用</span></span><br><span class="line">        self.elem[address] = key  <span class="comment"># 没有冲突则直接保存。</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search_hash</span><span class="params">(self, nums, key)</span>:</span></span><br><span class="line">        <span class="comment"># 创建hash表</span></span><br><span class="line">        self.count = len(nums)</span><br><span class="line">        self.elem = [<span class="literal">None</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums))]</span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">            self.insert_hash(num)</span><br><span class="line">        <span class="string">"""查找关键字，返回布尔值"""</span></span><br><span class="line">        star = address = key % self.count</span><br><span class="line">        <span class="keyword">while</span> self.elem[address] != key:</span><br><span class="line">            address = (address + <span class="number">1</span>) % self.count</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.elem[address] <span class="keyword">or</span> address == star:  <span class="comment"># 说明没找到或者循环到了开始的位置</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>顺序查找</title>
    <url>/2020/05/10/%E9%A1%BA%E5%BA%8F%E6%9F%A5%E6%89%BE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 最基础的遍历无序列表的查找算法</span></span><br><span class="line"><span class="comment"># 时间复杂度O(n)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 顺序查找(线性查找)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sequential_search</span><span class="params">(list, key)</span>:</span></span><br><span class="line">    length = len(list)</span><br><span class="line">    print(<span class="string">"length:%s list:%s"</span>%(length,list))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</span><br><span class="line">        <span class="keyword">if</span> list[i] == key:</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    list = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">123</span>, <span class="number">22</span>, <span class="number">54</span>, <span class="number">7</span>, <span class="number">99</span>, <span class="number">300</span>, <span class="number">222</span>]</span><br><span class="line">    result = sequential_search(list, <span class="number">22</span>)</span><br><span class="line">    print(<span class="string">"List key is:"</span>, result)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>斐波那契查找</title>
    <url>/2020/05/10/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%9F%A5%E6%89%BE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 斐波那契查找算法</span></span><br><span class="line"><span class="comment"># 时间复杂度O(log(n))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 斐波那契查找算法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibonacci_search</span><span class="params">(list, key)</span>:</span></span><br><span class="line">    length = len(list)</span><br><span class="line">    <span class="comment"># 需要一个现成的斐波那契列表。其最大元素的值必须超过查找表中元素个数的数值。</span></span><br><span class="line">    F = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">21</span>, <span class="number">34</span>, <span class="number">55</span>, <span class="number">89</span>, <span class="number">144</span>, <span class="number">233</span>, <span class="number">377</span>, <span class="number">610</span>, <span class="number">987</span>, <span class="number">1597</span>, <span class="number">2584</span>, <span class="number">4181</span>, <span class="number">6765</span>, <span class="number">10946</span>, <span class="number">17711</span>, <span class="number">28657</span>, <span class="number">46368</span>]</span><br><span class="line">    low = <span class="number">0</span></span><br><span class="line">    high = length - <span class="number">1</span></span><br><span class="line">    print(<span class="string">"length:%s list:%s"</span>%(length,list))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 为了使得查找表满足斐波那契特性，在表的最后添加几个同样的值</span></span><br><span class="line">    <span class="comment"># 这个值是原查找表的最后那个元素的值</span></span><br><span class="line">    <span class="comment"># 添加的个数由F[k]-1-high决定</span></span><br><span class="line">    k = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> high &gt; F[k] - <span class="number">1</span>:</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">    i = high</span><br><span class="line">    <span class="keyword">while</span> F[k] - <span class="number">1</span> &gt; i:</span><br><span class="line">        list.append(list[high])</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    time = <span class="number">0</span> <span class="comment"># 算法主逻辑。time用于展示循环的次数。</span></span><br><span class="line">    <span class="keyword">while</span> low &lt;= high:</span><br><span class="line">        time += <span class="number">1</span></span><br><span class="line">        <span class="comment"># 为了防止F列表下标溢出，设置if和else</span></span><br><span class="line">        <span class="keyword">if</span> k &lt; <span class="number">2</span>:</span><br><span class="line">            mid = low</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            mid = low + F[k - <span class="number">1</span>] - <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> key &lt; list[mid]:</span><br><span class="line">            high = mid - <span class="number">1</span></span><br><span class="line">            k -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> key &gt; list[mid]:</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">            k -= <span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> mid &lt;= high:</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> high</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    list = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">22</span>, <span class="number">54</span>, <span class="number">99</span>, <span class="number">123</span>, <span class="number">200</span>, <span class="number">222</span>, <span class="number">444</span>]</span><br><span class="line">    result = fibonacci_search(list, <span class="number">7</span>)</span><br><span class="line">    print(<span class="string">"List key is:"</span>, result)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>插值查找</title>
    <url>/2020/05/10/%E6%8F%92%E5%80%BC%E6%9F%A5%E6%89%BE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 时间复杂性：如果元素均匀分布，则O（log log n）），在最坏的情况下可能需要 O（n）。</span></span><br><span class="line"><span class="comment"># 空间复杂度：O（1）。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 插值查找算法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">interpolation_search</span><span class="params">(list, key)</span>:</span></span><br><span class="line">    length = len(list)</span><br><span class="line">    low = <span class="number">0</span></span><br><span class="line">    high = length - <span class="number">1</span></span><br><span class="line">    time = <span class="number">0</span></span><br><span class="line">    print(<span class="string">"length:%s list:%s"</span> % (length, list))</span><br><span class="line">    <span class="keyword">while</span> low &lt; high:</span><br><span class="line">        time += <span class="number">1</span></span><br><span class="line">        mid = low + int((high - low) * (key - list[low]) / (list[high] - list[low]))  <span class="comment"># 计算mid值是插值算法的核心代码</span></span><br><span class="line">        <span class="keyword">if</span> key &lt; list[mid]:</span><br><span class="line">            high = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> key &gt; list[mid]:</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    list = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">22</span>, <span class="number">54</span>, <span class="number">99</span>, <span class="number">123</span>, <span class="number">200</span>, <span class="number">222</span>, <span class="number">444</span>]</span><br><span class="line">    result = interpolation_search(list, <span class="number">7</span>)</span><br><span class="line">    print(<span class="string">"List key is:"</span>, result)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>B树查找</title>
    <url>/2020/05/10/B%E6%A0%91%E6%9F%A5%E6%89%BE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># B树查找</span></span><br><span class="line">inorder_find = <span class="literal">False</span></span><br><span class="line">rinorder_find = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># B树</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BTree</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.data = value</span><br><span class="line">        self.right = <span class="literal">None</span></span><br><span class="line">        self.inorder_find = <span class="literal">False</span></span><br><span class="line">        self.rinorder_find = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insertLeft</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        self.left = BTree(value)</span><br><span class="line">        <span class="keyword">return</span> self.left</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insertRight</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        self.right = BTree(value)</span><br><span class="line">        <span class="keyword">return</span> self.right</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(node, value)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> value &gt; node.data:</span><br><span class="line">        <span class="keyword">if</span> node.right:</span><br><span class="line">            insert(node.right, value)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            node.insertRight(value)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> node.left:</span><br><span class="line">            insert(node.left, value)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            node.insertLeft(value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 中序遍历：先左子树，再根节点，再右子树 从小到大排序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inorder</span><span class="params">(node, key)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> node.data:</span><br><span class="line">        <span class="keyword">if</span> node.left:</span><br><span class="line">            inorder(node.left, key)</span><br><span class="line">        node.show()</span><br><span class="line">        <span class="keyword">if</span> node.data == key:</span><br><span class="line">            <span class="keyword">global</span> inorder_find</span><br><span class="line">            print(<span class="string">"_______________________find it %s_______________________"</span> % key)</span><br><span class="line">            inorder_find = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> node.right:</span><br><span class="line">            inorder(node.right, key)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 倒中序遍历 从大到小排序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rinorder</span><span class="params">(node, key)</span>:</span>  <span class="comment"># 倒中序遍历</span></span><br><span class="line">    <span class="keyword">if</span> node.data:</span><br><span class="line">        <span class="keyword">if</span> node.right:</span><br><span class="line">            rinorder(node.right, key)</span><br><span class="line">        node.show()</span><br><span class="line">        <span class="keyword">if</span> node.left:</span><br><span class="line">            rinorder(node.left, key)</span><br><span class="line">        <span class="keyword">if</span> node.data == key:</span><br><span class="line">            <span class="keyword">global</span> rinorder_find</span><br><span class="line">            print(<span class="string">"_______________________find it %s_______________________"</span> % key)</span><br><span class="line">            rinorder_find = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    list = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">22</span>, <span class="number">54</span>, <span class="number">99</span>, <span class="number">123</span>, <span class="number">200</span>, <span class="number">222</span>, <span class="number">444</span>]</span><br><span class="line">    key = <span class="number">222</span></span><br><span class="line">    node = BTree(list[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(list)):</span><br><span class="line">        insert(node, list[i])</span><br><span class="line">    print(<span class="string">"key: %s\nLength: %s\nList: %s"</span> % (key, len(list), list))</span><br><span class="line"></span><br><span class="line">    inorder(node, key)</span><br><span class="line">    print(<span class="string">"________________________inorder List key is:"</span>, inorder_find)</span><br><span class="line"></span><br><span class="line">    rinorder(node, key)</span><br><span class="line">    print(<span class="string">"________________________rinorder List key is:"</span>, rinorder_find)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树查找（BST）</title>
    <url>/2020/05/10/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%9F%A5%E6%89%BE%EF%BC%88BST%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1、广度优先BFS--查找</span></span><br><span class="line"><span class="comment"># 2、前序遍历--查找</span></span><br><span class="line"><span class="comment"># 3、中序遍历--查找</span></span><br><span class="line"><span class="comment"># 4、后序遍历--查找</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, element, lchild=None, rchild=None)</span>:</span></span><br><span class="line">        self.element = element</span><br><span class="line">        self.lchild = lchild</span><br><span class="line">        self.rchild = rchild</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tree</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, root=None)</span>:</span></span><br><span class="line">        self.list = []</span><br><span class="line">        self.root = root</span><br><span class="line">        self.preorder_find = <span class="literal">False</span></span><br><span class="line">        self.inorder_find = <span class="literal">False</span></span><br><span class="line">        self.postorder_find = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 增加树节点</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        self.list.append(item)</span><br><span class="line">        node = Node(item)</span><br><span class="line">        <span class="keyword">if</span> self.root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self.root = node</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            queue = []</span><br><span class="line">            queue.append(self.root)</span><br><span class="line">            <span class="keyword">while</span> queue:</span><br><span class="line">                cur_node = queue.pop()</span><br><span class="line">                <span class="keyword">if</span> cur_node.lchild <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                    cur_node.lchild = node</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                <span class="keyword">elif</span> cur_node.rchild <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                    cur_node.rchild = node</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    queue.append(cur_node.lchild)</span><br><span class="line">                    queue.append(cur_node.rchild)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 广度优先BFS</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">width_circle</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">' '</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            queue = []</span><br><span class="line">            queue.append(self.root)</span><br><span class="line">            <span class="keyword">while</span> queue:</span><br><span class="line">                cur_node = queue.pop()</span><br><span class="line">                print(cur_node.element, end=<span class="string">' '</span>)</span><br><span class="line">                <span class="keyword">if</span> cur_node.element == key:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                <span class="keyword">if</span> cur_node.rchild <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                    queue.append(cur_node.lchild)</span><br><span class="line">                <span class="keyword">if</span> cur_node.rchild <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                    queue.append(cur_node.rchild)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 前序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preorder</span><span class="params">(self, node, key)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> node == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        print(node.element, end=<span class="string">' '</span>)</span><br><span class="line">        self.preorder(node.lchild, key)</span><br><span class="line">        self.preorder(node.rchild, key)</span><br><span class="line">        <span class="keyword">if</span> node.element == key:</span><br><span class="line">            print(<span class="string">"\n_______________________find it:%s_______________________"</span> % key)</span><br><span class="line">            self.preorder_find = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 中序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inorder</span><span class="params">(self, node, key)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> node == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.inorder(node.lchild, key)</span><br><span class="line">        print(node.element, end=<span class="string">' '</span>)</span><br><span class="line">        <span class="keyword">if</span> node.element == key:</span><br><span class="line">            print(<span class="string">"\n_______________________find it:%s_______________________"</span> % key)</span><br><span class="line">            self.inorder_find = <span class="literal">True</span></span><br><span class="line">        self.inorder(node.rchild, key)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 后序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">postorder</span><span class="params">(self, node, key)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> node == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.postorder(node.lchild, key)</span><br><span class="line">        self.postorder(node.rchild, key)</span><br><span class="line">        print(node.element, end=<span class="string">' '</span>)</span><br><span class="line">        <span class="keyword">if</span> node.element == key:</span><br><span class="line">            print(<span class="string">"\n_______________________find it:%s_______________________"</span> % key)</span><br><span class="line">            self.postorder_find = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    t = Tree()</span><br><span class="line">    list = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">22</span>, <span class="number">54</span>, <span class="number">99</span>, <span class="number">123</span>, <span class="number">200</span>, <span class="number">222</span>, <span class="number">444</span>]</span><br><span class="line">    key = <span class="number">12</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> list:</span><br><span class="line">        t.add(item)</span><br><span class="line">    print(<span class="string">"Length: %s\nList: %s"</span> % (len(list), list))</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"\n广度优先BFS:"</span>)</span><br><span class="line">    result = t.width_circle(key)</span><br><span class="line">    print(<span class="string">"\nList key is:"</span>, result)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"\n前序遍历:"</span>)</span><br><span class="line">    t.preorder(t.root, key)</span><br><span class="line">    print(<span class="string">"\nList key is:"</span>, t.preorder_find)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"\n中序遍历"</span>)</span><br><span class="line">    t.inorder(t.root, key)</span><br><span class="line">    print(<span class="string">"\nList key is:"</span>, t.inorder_find)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"\n后序遍历"</span>)</span><br><span class="line">    t.postorder(t.root, key)</span><br><span class="line">    print(<span class="string">"\nList key is:"</span>, t.postorder_find)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>分块查找</title>
    <url>/2020/05/10/%E5%88%86%E5%9D%97%E6%9F%A5%E6%89%BE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 时间复杂度：O(log(m)+N/m)</span></span><br><span class="line"><span class="comment"># 1、先选取各块中的最大关键字构成一个索引表</span></span><br><span class="line"><span class="comment"># 2、查找分两个部分：先对索引表进行二分查找或顺序查找，以确定待查记录在哪一块中</span></span><br><span class="line"><span class="comment"># 3、在已确定的块中用顺序法进行查找</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 二分查找</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(list, key)</span>:</span></span><br><span class="line">    length = len(list)</span><br><span class="line">    first = <span class="number">0</span></span><br><span class="line">    last = length - <span class="number">1</span></span><br><span class="line">    print(<span class="string">"length:%s list:%s"</span> % (length, list))</span><br><span class="line">    <span class="keyword">while</span> first &lt;= last:</span><br><span class="line">        mid = (last + first) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> list[mid] &gt; key:</span><br><span class="line">            last = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> list[mid] &lt; key:</span><br><span class="line">            first = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分块查找</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">block_search</span><span class="params">(list, count, key)</span>:</span></span><br><span class="line">    length = len(list)</span><br><span class="line">    block_length = length // count</span><br><span class="line">    <span class="keyword">if</span> count * block_length != length:</span><br><span class="line">        block_length += <span class="number">1</span></span><br><span class="line">    print(<span class="string">"block_length:"</span>, block_length)  <span class="comment"># 块的多少</span></span><br><span class="line">    <span class="keyword">for</span> block_i <span class="keyword">in</span> range(block_length):</span><br><span class="line">        block_list = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(count):</span><br><span class="line">            <span class="keyword">if</span> block_i * count + i &gt;= length:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            block_list.append(list[block_i * count + i])</span><br><span class="line">        result = binary_search(block_list, key)</span><br><span class="line">        <span class="keyword">if</span> result != <span class="literal">False</span>:</span><br><span class="line">            <span class="keyword">return</span> block_i * count + result</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    list = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">22</span>, <span class="number">54</span>, <span class="number">99</span>, <span class="number">123</span>, <span class="number">200</span>, <span class="number">222</span>, <span class="number">444</span>]</span><br><span class="line">    result = block_search(list, <span class="number">4</span>, <span class="number">444</span>)  <span class="comment"># 第二个参数是块的长度，最后一个参数是要查找的元素</span></span><br><span class="line">    print(<span class="string">"List key is:"</span>, result)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue上传文件（方法一）</title>
    <url>/2020/05/11/Vue%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%EF%BC%88%E6%96%B9%E6%B3%95%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      上传图片：&lt;input type=<span class="string">"file"</span> @change=<span class="string">"upload"</span>&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 自定义方法</span></span><br><span class="line">    methods: &#123;</span><br><span class="line">        <span class="comment">// 定义提交事件</span></span><br><span class="line">        upload(e) &#123;</span><br><span class="line">            <span class="comment">// 获取文件</span></span><br><span class="line">            <span class="keyword">let</span> file = e.target.files[<span class="number">0</span>];</span><br><span class="line">            <span class="comment">// 生命表单参数</span></span><br><span class="line">            <span class="keyword">let</span> param = <span class="keyword">new</span> FormData();</span><br><span class="line">            param.append(<span class="string">'img'</span>, file);</span><br><span class="line">            <span class="comment">// 声明请求头</span></span><br><span class="line">            <span class="keyword">let</span> config = &#123;</span><br><span class="line">                headers: &#123;</span><br><span class="line">                    <span class="string">'Content-Type'</span>: <span class="string">'multipart/form-data'</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 请求后台接口</span></span><br><span class="line">            <span class="keyword">this</span>.axios.post(<span class="string">'http://localhost:8000/upload/'</span>,param, config).then(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(response);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>上传文件</tag>
      </tags>
  </entry>
  <entry>
    <title>Djnago反序例化</title>
    <url>/2020/05/11/Djnago%E5%8F%8D%E5%BA%8F%E4%BE%8B%E5%8C%96/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件序列化器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UploadSer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Upload</span><br><span class="line">        fields = <span class="string">'__all__'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加图片</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UploadAPI</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="comment"># 初始化参数</span></span><br><span class="line">        img_ser = UploadSer(data=request.data)</span><br><span class="line">        <span class="comment"># 打印前端传过来的数据</span></span><br><span class="line">        print(request.data)</span><br><span class="line">        <span class="comment"># 验证数据</span></span><br><span class="line">        <span class="keyword">if</span> img_ser.is_valid():</span><br><span class="line">            <span class="comment"># 入库</span></span><br><span class="line">            img_ser.save()</span><br><span class="line">            <span class="comment"># 返回结果</span></span><br><span class="line">            <span class="keyword">return</span> Response(&#123;</span><br><span class="line">                <span class="string">'code'</span>: <span class="number">200</span>,</span><br><span class="line">                <span class="string">'message'</span>: <span class="string">'成功'</span></span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;</span><br><span class="line">                <span class="string">'code'</span>: <span class="number">400</span>,</span><br><span class="line">                <span class="string">'message'</span>: <span class="string">'失败'</span></span><br><span class="line">            &#125;)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>反序例化</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue上传文件（方法二）</title>
    <url>/2020/05/11/Vue%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%EF%BC%88%E6%96%B9%E6%B3%95%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      上传图片：&lt;input type=<span class="string">"file"</span> id=<span class="string">"img"</span>&gt;</span><br><span class="line">      &lt;button @click=<span class="string">"submit"</span>&gt;提交&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">export default &#123;</span></span><br><span class="line"><span class="regexp">    data() &#123;</span></span><br><span class="line"><span class="regexp">        return &#123;</span></span><br><span class="line"><span class="regexp">            </span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 自定义方法</span></span><br><span class="line"><span class="regexp">    methods: &#123;</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 定义提交事件</span></span><br><span class="line"><span class="regexp">        submit() &#123;</span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/ 实例化对象</span></span><br><span class="line"><span class="regexp">            var formdata = new FormData();</span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/ 获取输入框id</span></span><br><span class="line"><span class="regexp">            let img = document.getElementById('img').files[0];</span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/ 'img'与数据库字段一致 文件实体</span></span><br><span class="line"><span class="regexp">            formdata.append('img', img);</span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/ 请求后台接口</span></span><br><span class="line"><span class="regexp">            this.axios.post('http:/</span><span class="regexp">/localhost:8000/u</span>pload/<span class="string">', (formdata)).then(response=&gt;&#123;</span></span><br><span class="line"><span class="string">                // 打印控制台</span></span><br><span class="line"><span class="string">                console.log(response);</span></span><br><span class="line"><span class="string">            &#125;)</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;style&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/style&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>上传文件</tag>
      </tags>
  </entry>
  <entry>
    <title>Django分页</title>
    <url>/2020/05/07/Django%E5%88%86%E9%A1%B5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 分页</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewsList</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="comment"># 获取当前页</span></span><br><span class="line">        page = request.GET.get(<span class="string">'page'</span>, <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 获取每页的条数</span></span><br><span class="line">        size = request.GET.get(<span class="string">'size'</span>, <span class="number">2</span>)</span><br><span class="line">        <span class="comment"># 开始 当前页减一 乘以 页码</span></span><br><span class="line">        data_start = (int(page - <span class="number">1</span>) * int(size))</span><br><span class="line">        <span class="comment"># 结束 当前页 乘以 页码</span></span><br><span class="line">        data_end = int(page) * int(size)</span><br><span class="line">        <span class="comment"># 获取所有新闻利用切片分页</span></span><br><span class="line">        news_list = News.objects.all()[data_start:data_end]</span><br><span class="line">        <span class="comment"># 返回数据总条数</span></span><br><span class="line">        count = News.objects.count()</span><br><span class="line">        <span class="comment"># 序例化</span></span><br><span class="line">        news_ser = NewsSer(news_list, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># 返回</span></span><br><span class="line">        <span class="keyword">return</span> Response(&#123;</span><br><span class="line">            <span class="string">'total'</span>: count,</span><br><span class="line">            <span class="string">'datalist'</span>: news_ser.data</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>分页</tag>
      </tags>
  </entry>
  <entry>
    <title>Django验证码</title>
    <url>/2020/05/07/Django%E9%AA%8C%E8%AF%81%E7%A0%81/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> View</span><br><span class="line"><span class="comment"># 绘画库</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageDraw</span><br><span class="line"><span class="comment"># 字体库</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageFont</span><br><span class="line"><span class="comment"># 图片库</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="comment"># 随机库</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment"># 文件流</span></span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义验证码</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCode</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="comment"># 定义随机验证码颜色</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_random_color</span><span class="params">(self)</span>:</span></span><br><span class="line">        R = random.randrange(<span class="number">255</span>)</span><br><span class="line">        G = random.randrange(<span class="number">255</span>)</span><br><span class="line">        B = random.randrange(<span class="number">255</span>)</span><br><span class="line">        <span class="keyword">return</span> (R, G, B)</span><br><span class="line">    <span class="comment"># 随机验证码</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="comment"># 画布</span></span><br><span class="line">        img_size = (<span class="number">110</span>, <span class="number">50</span>)</span><br><span class="line">        <span class="comment"># 定义颜色类型</span></span><br><span class="line">        image = Image.new(<span class="string">'RGB'</span>, img_size, <span class="string">'white'</span>)</span><br><span class="line">        <span class="comment"># 画笔</span></span><br><span class="line">        draw = ImageDraw.Draw(image, <span class="string">'RGB'</span>)</span><br><span class="line">        <span class="comment"># 定义随机字符串</span></span><br><span class="line">        source = <span class="string">'0123456789'</span></span><br><span class="line">        <span class="comment"># 定义容器，接收随机字符串</span></span><br><span class="line">        code_str = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">            <span class="comment"># 获取字体颜色</span></span><br><span class="line">            text_color = self.get_random_color()</span><br><span class="line">            <span class="comment"># 获取字符串</span></span><br><span class="line">            tmp_num = random.randrange(len(source))</span><br><span class="line">            <span class="comment"># 获取字符集</span></span><br><span class="line">            random_str = source[tmp_num]</span><br><span class="line">            <span class="comment"># 添加到容器</span></span><br><span class="line">            code_str += random_str</span><br><span class="line">            <span class="comment"># 绘制</span></span><br><span class="line">            draw.text((<span class="number">10</span>+<span class="number">30</span>*i, <span class="number">20</span>), random_str, text_color)</span><br><span class="line">        <span class="comment"># 文件流缓冲区</span></span><br><span class="line">        buf = io.BytesIO()</span><br><span class="line">        <span class="comment"># 将图片保存到缓冲区</span></span><br><span class="line">        image.save(buf, <span class="string">'png'</span>)</span><br><span class="line">        <span class="comment"># 将随机码存储到session中</span></span><br><span class="line">        request.session[<span class="string">'code'</span>] = code_str</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(buf.getbuffer(), <span class="string">'image/png'</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>验证码</tag>
      </tags>
  </entry>
  <entry>
    <title>MD5加密</title>
    <url>/2020/05/06/MD5%E5%8A%A0%E5%AF%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul>
<li><strong>1991年，Rivest开发出技术上更为趋近成熟的MD5<a href="https://baike.baidu.com/item/算法" target="_blank" rel="noopener">算法</a></strong></li>
<li><strong>它在MD4的基础上增加了”安全带”的概念</strong></li>
<li><strong>虽然MD5比MD4复杂度大一些，但却更为安全</strong></li>
</ul>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ul>
<li><strong>MD5码以512位分组来处理输入的信息，且每一分组又被划分为16个32位子分组，经过了一系列的处理后，算法的输出由四个32位分组组成，将这四个32位分组级联后将生成一个128位<a href="https://baike.baidu.com/item/散列值/10398613" target="_blank" rel="noopener">散列值</a></strong></li>
</ul>
<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ul>
<li><strong>用于密码管理</strong></li>
<li><strong>电子签名</strong></li>
<li><strong>垃圾邮件筛选</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># md5加密</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">password_encrypt</span><span class="params">(pwd)</span>:</span></span><br><span class="line">    <span class="comment"># 实例化md5()方法</span></span><br><span class="line">    md5 = hashlib.md5()</span><br><span class="line">    <span class="comment"># 转码</span></span><br><span class="line">    password_utf8 = str(pwd).encode(encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="comment"># 加密</span></span><br><span class="line">    md5.update(password_utf8)</span><br><span class="line">    <span class="comment"># 返回密文</span></span><br><span class="line">    <span class="keyword">return</span> md5.hexdigest()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>MD5加密</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue国际化</title>
    <url>/2020/05/12/Vue%E5%9B%BD%E9%99%85%E5%8C%96/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><ul>
<li><p><strong>首先在项目根目录安装国际化</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install vue-i18n</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>在src文件下创建—&gt;lang文件夹—&gt;接着创建en.js、zh.js文件，代码如下：</strong></p>
<ul>
<li><p><strong>en.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//双语规范的变量（English）</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> m = &#123;</span><br><span class="line">  <span class="comment">//定义English语言</span></span><br><span class="line">  <span class="string">'home'</span>: <span class="string">'home'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>zh.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//双语规范的变量（简体中文）</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> m = &#123;</span><br><span class="line">  <span class="comment">//定义简体中文语言</span></span><br><span class="line">  <span class="string">'home'</span>: <span class="string">'主页'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong>打开src—&gt;main.js，代码如下：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入国际化</span></span><br><span class="line"><span class="keyword">import</span> VueI18n <span class="keyword">from</span> <span class="string">'vue-i18n'</span>;</span><br><span class="line"><span class="comment">// 国际化注册</span></span><br><span class="line">Vue.use(VueI18n);</span><br><span class="line"><span class="comment">// 实例化对象</span></span><br><span class="line"><span class="keyword">const</span> i18n = <span class="keyword">new</span> VueI18n(&#123;</span><br><span class="line">  <span class="comment">// 定义默认语言为中文</span></span><br><span class="line">  locale: <span class="string">'zh'</span>,</span><br><span class="line">  <span class="comment">// 语言包声明</span></span><br><span class="line">  messages: &#123;</span><br><span class="line">    <span class="string">'zh'</span>: <span class="built_in">require</span>(<span class="string">'./lang/zh'</span>),</span><br><span class="line">    <span class="string">'en'</span>: <span class="built_in">require</span>(<span class="string">'./lang/en'</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  i18n,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>打开src—&gt;components—&gt;新建.vue文件，代码如下：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &#123;&#123;$t(<span class="string">'m.home'</span>)&#125;&#125;</span><br><span class="line">    &lt;!-- 这里用的是HeyUI标签，具体可以看官方文档！ --&gt;</span><br><span class="line">    &lt;HSwitch @change=<span class="string">"lang_change"</span> v-model=<span class="string">"lang"</span> :small=<span class="string">'true'</span>&gt;中/英&lt;<span class="regexp">/HSwitch&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">export default &#123;</span></span><br><span class="line"><span class="regexp">  data() &#123;</span></span><br><span class="line"><span class="regexp">    return &#123;</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/ 定义语言开关变量</span></span><br><span class="line"><span class="regexp">      lang: 0</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ 自定义方法</span></span><br><span class="line"><span class="regexp">  methods: &#123;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 提交事件</span></span><br><span class="line"><span class="regexp">    lang_change() &#123;</span></span><br><span class="line"><span class="regexp">      if (this.lang === true) &#123;</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ lang为true显示English</span></span><br><span class="line"><span class="regexp">        this.$i18n.locale = 'en';</span></span><br><span class="line"><span class="regexp">      &#125; else &#123;</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 否则显示简体中文</span></span><br><span class="line"><span class="regexp">        this.$i18n.locale = 'zh'</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>国际化</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue+HeyUI实现分页</title>
    <url>/2020/05/12/Vue+HeyUI%E5%AE%9E%E7%8E%B0%E5%88%86%E9%A1%B5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><ul>
<li><p><strong>俗话说：“人看衣服、马看鞍”，网站也是如此，一个网站如果没有华丽的外表，那么就很少吸引眼球，接着用到非常美观的HeyUI框架结合Vue来实现分页</strong></p>
</li>
<li><p><strong>首先是配置，在本站找即可</strong></p>
</li>
<li><p><strong>多了不说，少了不唠。代码如下：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div align=<span class="string">'center'</span>&gt;</span><br><span class="line">      &lt;Table :datas=<span class="string">'datas'</span> v-width=<span class="string">'400'</span>&gt;</span><br><span class="line">          &lt;TableItem title=<span class="string">"序号"</span> prop=<span class="string">'id'</span>&gt;&lt;<span class="regexp">/TableItem&gt;</span></span><br><span class="line"><span class="regexp">          &lt;TableItem title="书名" prop='name'&gt;&lt;/</span>TableItem&gt;</span><br><span class="line">      &lt;<span class="regexp">/Table&gt;</span></span><br><span class="line"><span class="regexp">      &lt;p&gt;</span></span><br><span class="line"><span class="regexp">            &lt;Pagination v-model="pagination" align="center" @change="Change"&gt;&lt;/</span>Pagination&gt;</span><br><span class="line">      &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">export default &#123;</span></span><br><span class="line"><span class="regexp">    data() &#123;</span></span><br><span class="line"><span class="regexp">        return &#123;</span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/ 定义空列表，渲染后端数据</span></span><br><span class="line"><span class="regexp">            datas: [],</span></span><br><span class="line"><span class="regexp">            pagination: &#123;</span></span><br><span class="line"><span class="regexp">                /</span><span class="regexp">/ 当前页</span></span><br><span class="line"><span class="regexp">                page: 1,</span></span><br><span class="line"><span class="regexp">                /</span><span class="regexp">/ 每页条数</span></span><br><span class="line"><span class="regexp">                size: 1,</span></span><br><span class="line"><span class="regexp">                /</span><span class="regexp">/ 总条数</span></span><br><span class="line"><span class="regexp">                total: null</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    mounted() &#123;</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 调用方法</span></span><br><span class="line"><span class="regexp">        this.Change();</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 自定义方法</span></span><br><span class="line"><span class="regexp">    methods: &#123;</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 提交事件</span></span><br><span class="line"><span class="regexp">        Change() &#123;</span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/ 请求后台接口并传参</span></span><br><span class="line"><span class="regexp">            this.axios.get('http:/</span><span class="regexp">/localhost:8000/</span>books/?page=<span class="string">'+parseInt(this.pagination.page)+'</span>&amp;size=<span class="string">'+parseInt(this.pagination.size)).then((result) =&gt; &#123;</span></span><br><span class="line"><span class="string">                // 赋值</span></span><br><span class="line"><span class="string">                this.datas = result.data.data;</span></span><br><span class="line"><span class="string">                this.pagination.total = result.data.total;</span></span><br><span class="line"><span class="string">                // 打印控制台</span></span><br><span class="line"><span class="string">                console.log(result);</span></span><br><span class="line"><span class="string">            &#125;)</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
]]></content>
      <categories>
        <category>Vue+HeyUI</category>
      </categories>
      <tags>
        <tag>分页</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令</title>
    <url>/2020/05/10/Linux%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="常用命令及技巧"><a href="#常用命令及技巧" class="headerlink" title="常用命令及技巧"></a><strong>常用命令及技巧</strong></h1><h3 id="一、通用命令"><a href="#一、通用命令" class="headerlink" title="一、通用命令"></a><strong>一、通用命令</strong></h3><ul>
<li><strong>date：打印或者设置系统的日期和时间</strong></li>
<li><strong>stty -a：可以查看或者打印控制字符（Ctrl-C、Ctrl-D、Ctrl-Z等）</strong></li>
<li><strong>passwd：用passwd -h查看</strong></li>
<li><strong>logout，login： 登录shell的登录和注销命令</strong></li>
<li><strong>more，less，head tail：显示或部分显示文件内容</strong></li>
<li><strong>lp/lpstat/cancel， lpr/lpq/lprm： 打印文件</strong></li>
<li><strong>chmod u+x：更改文件权限</strong></li>
<li><strong>rm -fr dir：删除非空目录</strong></li>
<li><strong>cp -R dir：拷贝目录</strong></li>
<li><strong>fg jobid ：可以将一个后台进程放到前台</strong></li>
<li><strong>kill 的作用： send a signal to a process、 eg： kill -9 发送的是SIG_KILL信号，具体发送什么信号 可以通过 man kill 查看</strong></li>
<li><strong>ps 的用法， ps -e 或 ps -o pid，ppid，session，tpgid， comm (其中session显示的sessionid， tpgid显示前台进程组id， comm显示命令名称)</strong></li>
</ul>
<h3 id="二、Ubuntu常用命令"><a href="#二、Ubuntu常用命令" class="headerlink" title="二、Ubuntu常用命令"></a>二、Ubuntu常用命令</h3><ul>
<li><strong>dpkg： package manager for Debian</strong></li>
<li><strong>安装： dpkg -i package</strong></li>
<li><strong>卸载： dpkg -r package</strong></li>
<li><strong>卸载并删除配置文件： dpkg -P |–purge package</strong></li>
<li><strong>如果安装一个包时、说依赖某些库、 可以先 apt-get install somelib</strong></li>
<li><strong>查看软件包安装内容 ：dpkg -L package</strong></li>
<li><strong>查看文件由哪个软件包提供： dpkg -S filename</strong></li>
<li><strong>另外 dpkg还有 dselect和aptitude 两个frontend</strong></li>
<li><strong>安装： apt-get install packs</strong></li>
<li><strong>更新源：apt-get update</strong></li>
<li><strong>升级系统：apt-get upgrade</strong></li>
<li><strong>智能升级、安装新软件包，删除废弃的软件包：apt-get dist-upgrade</strong></li>
<li><strong>f –fix broken 修复依赖：apt-get -f install</strong></li>
<li><strong>自动删除无用的软件：apt-get autoremove</strong></li>
<li><strong>删除软件：apt-get remove packages</strong></li>
<li><strong>删除包并清除配置文件：apt-get remove package –purge</strong></li>
<li><strong>清除所以删除包的残余配置文件： dpkg -l |grep ^rc|awk ‘{print $2}’ |tr [“/n”] [“ “]|sudo xargs dpkg -P</strong></li>
<li><strong>安装软件时候包的临时存放目录 ： /var/cache/apt/archives</strong></li>
<li><strong>清除该目录： apt-get clean</strong></li>
<li><strong>清除该目录的旧版本的软件缓存： apt-get autoclean</strong></li>
<li><strong>查询软件some的依赖包： apt-cache depends some</strong></li>
<li><strong>查询软件some被哪些包依赖： apt-get rdepends some</strong></li>
<li><strong>搜索软件： apt-cache search name|regexp</strong></li>
<li><strong>查看软件包的作用：apt-cache show package</strong></li>
<li><strong>查看一个软件的编译依赖库： apt-cache showsrc packagename|grep Build-Depends</strong></li>
<li><strong>下载软件的源代码 ： apt-get source packagename (注： sources、list 中应该有 deb-src 源)</strong></li>
<li><strong>安装软件包源码的同时， 安装其编译环境 ：apt-get build-dep packagename (有deb-src源)</strong></li>
<li><strong>如何将本地光盘加入安装源列表： apt-cdrom add</strong></li>
<li><strong>查看内核版本：uname -a</strong></li>
<li><strong>查看ubuntu 版本：cat /etc/issue</strong></li>
<li><strong>查看网卡状态 ：ethtool eth0</strong></li>
<li><strong>查看内存，cpu的信息：cat /proc/meminfo ; cat /proc/cpuinfo</strong></li>
<li><strong>打印文件系统空间使用情况：df -h</strong></li>
<li><strong>查看硬盘分区情况：fdisk</strong></li>
<li><strong>产看文件大小：du -h filename;</strong></li>
<li><strong>查看目录大小：du -hs dirname ; du -h dirname是查看目录下所有文件的大小</strong></li>
<li><strong>查看内存的使用：free -m/-g/-k</strong></li>
<li><strong>查看进程：ps -e 或ps -aux –&gt;显示用户</strong></li>
<li><strong>杀掉进程：kill pid</strong></li>
<li><strong>强制杀掉：killall -9 processname</strong></li>
<li><strong>配置 ADSL： sudo pppoeconf</strong></li>
<li><strong>ADSL手工拨号： sudo pon dsl-provider</strong></li>
<li><strong>激活 ADSL ： sudo /etc/ppp/pppoe_on_boot</strong></li>
<li><strong>断开 ADSL： sudo poff</strong></li>
<li><strong>根据IP查网卡地址： arping IP地址</strong></li>
<li><strong>产看本地网络信息（包括ip等）： ifconfig | ifconfig eth0</strong></li>
<li><strong>查看路由信息： netstat -r</strong></li>
<li><strong>关闭网卡： sudo ifconfig eth0 down</strong></li>
<li><strong>启用网卡： sudo ifconfig eth0 up</strong></li>
<li><strong>添加一个服务： sudo update-rc、d 服务名 defaults 99</strong></li>
<li><strong>删除一个服务： sudo update-rc、d 服务名 remove</strong></li>
<li><strong>临时重启一个服务： /etc/init、d/服务名 restart</strong></li>
<li><strong>临时关闭一个服务： /etc/init、d/服务名 stop</strong></li>
<li><strong>临时启动一个服务： /etc/init、d/服务名 start</strong></li>
<li><strong>控制台下显示中文： sudo apt-get install zhcon</strong></li>
<li><strong>查找某个文件： whereis filename 或 find 目录 -name 文件名</strong></li>
<li><strong>解压缩 a、tar、gz： tar zxvf a、tar、gz</strong></li>
<li><strong>解压缩 a、tar、bz2： tar jxvf a、tar、bz2</strong></li>
<li><strong>压缩aaa bbb目录为xxx、tar、gz： tar zcvf xxx、tar、gz aaa bbb</strong></li>
<li><strong>压缩aaa bbb目录为xxx、tar、bz2： tar jcvf xxx、tar、bz2 aaa bbb</strong></li>
<li><strong>computer：/// - 全部挂载的设备和网络</strong></li>
<li><strong>network：/// - 浏览可用的网络</strong></li>
<li><strong>burn：/// - 一个刻录 CDs/DVDs 的数据虚拟目录</strong></li>
<li><strong>smb：/// - 可用的 windows/samba 网络资源</strong></li>
<li><strong>x-nautilus-desktop：/// - 桌面项目和图标</strong></li>
<li><strong>file：/// - 本地文件</strong></li>
<li><strong>trash：/// - 本地回收站目录</strong></li>
<li><strong>ftp：// - FTP 文件夹</strong></li>
<li><strong>ssh：// - SSH 文件夹</strong></li>
<li><strong>fonts：/// - 字体文件夹，可将字体文件拖到此处以完成安装</strong></li>
<li><strong>themes：/// - 系统主题文件夹</strong></li>
<li><strong>查看本地所有的tpc，udp监听端口： netstat -tupln (t=tcp， u=udp， p=program， l=listen， n=numric)</strong></li>
<li><strong>通过man搜说相关命令： man -k keyword 、 eg： man -k user</strong></li>
<li><strong>统计文件所占用的实际磁盘空间： du (du - estimate file space usage)</strong></li>
<li><strong>统计文件中的字符，字节数： wc -c/-l/-w (wc - print the number of newlines， words， and bytes in files)</strong></li>
<li><strong>快速重启X服务： 同时按下： Alt + Ctrl + Backspace 三个键</strong></li>
<li><strong>打开”运行”窗口： 同时按下 Alt + F2 键</strong></li>
<li><strong>全屏：直接按下 PrtScr 键</strong></li>
<li><strong>当前窗口：同时按下 Alt + PrtScr 键</strong></li>
<li><strong>延时截屏：在 终端 或 “运行”窗口中输入命令： gnome-screenshot –delay 3 ，将延时 3 秒后截屏</strong></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>命令</tag>
      </tags>
  </entry>
</search>
